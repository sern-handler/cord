/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GithubUser } from './GithubUser';
import {
    GithubUserFromJSON,
    GithubUserFromJSONTyped,
    GithubUserToJSON,
} from './GithubUser';

/**
 * 
 * @export
 * @interface GithubWebhook
 */
export interface GithubWebhook {
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    action?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    ref?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    refType?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    comment?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    issue?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    pullRequest?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    repository?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    forkee?: any | null;
    /**
     * 
     * @type {GithubUser}
     * @memberof GithubWebhook
     */
    sender: GithubUser;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    member?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    release?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    headCommit?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    commits?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    forced?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    compare?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    review?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    checkRun?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    checkSuite?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    discussion?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubWebhook
     */
    answer?: any | null;
}

/**
 * Check if a given object implements the GithubWebhook interface.
 */
export function instanceOfGithubWebhook(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sender" in value;

    return isInstance;
}

export function GithubWebhookFromJSON(json: any): GithubWebhook {
    return GithubWebhookFromJSONTyped(json, false);
}

export function GithubWebhookFromJSONTyped(json: any, ignoreDiscriminator: boolean): GithubWebhook {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': !exists(json, 'action') ? undefined : json['action'],
        'ref': !exists(json, 'ref') ? undefined : json['ref'],
        'refType': !exists(json, 'ref_type') ? undefined : json['ref_type'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'issue': !exists(json, 'issue') ? undefined : json['issue'],
        'pullRequest': !exists(json, 'pull_request') ? undefined : json['pull_request'],
        'repository': !exists(json, 'repository') ? undefined : json['repository'],
        'forkee': !exists(json, 'forkee') ? undefined : json['forkee'],
        'sender': GithubUserFromJSON(json['sender']),
        'member': !exists(json, 'member') ? undefined : json['member'],
        'release': !exists(json, 'release') ? undefined : json['release'],
        'headCommit': !exists(json, 'head_commit') ? undefined : json['head_commit'],
        'commits': !exists(json, 'commits') ? undefined : json['commits'],
        'forced': !exists(json, 'forced') ? undefined : json['forced'],
        'compare': !exists(json, 'compare') ? undefined : json['compare'],
        'review': !exists(json, 'review') ? undefined : json['review'],
        'checkRun': !exists(json, 'check_run') ? undefined : json['check_run'],
        'checkSuite': !exists(json, 'check_suite') ? undefined : json['check_suite'],
        'discussion': !exists(json, 'discussion') ? undefined : json['discussion'],
        'answer': !exists(json, 'answer') ? undefined : json['answer'],
    };
}

export function GithubWebhookToJSON(value?: GithubWebhook | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': value.action,
        'ref': value.ref,
        'ref_type': value.refType,
        'comment': value.comment,
        'issue': value.issue,
        'pull_request': value.pullRequest,
        'repository': value.repository,
        'forkee': value.forkee,
        'sender': GithubUserToJSON(value.sender),
        'member': value.member,
        'release': value.release,
        'head_commit': value.headCommit,
        'commits': value.commits,
        'forced': value.forced,
        'compare': value.compare,
        'review': value.review,
        'check_run': value.checkRun,
        'check_suite': value.checkSuite,
        'discussion': value.discussion,
        'answer': value.answer,
    };
}

