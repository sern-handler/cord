/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SettingsEmojiResponse } from './SettingsEmojiResponse';
import {
    SettingsEmojiResponseFromJSON,
    SettingsEmojiResponseFromJSONTyped,
    SettingsEmojiResponseToJSON,
} from './SettingsEmojiResponse';

/**
 * 
 * @export
 * @interface OnboardingPromptOptionResponse
 */
export interface OnboardingPromptOptionResponse {
    /**
     * 
     * @type {any}
     * @memberof OnboardingPromptOptionResponse
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof OnboardingPromptOptionResponse
     */
    title: any | null;
    /**
     * 
     * @type {any}
     * @memberof OnboardingPromptOptionResponse
     */
    description: any | null;
    /**
     * 
     * @type {SettingsEmojiResponse}
     * @memberof OnboardingPromptOptionResponse
     */
    emoji: SettingsEmojiResponse;
    /**
     * 
     * @type {any}
     * @memberof OnboardingPromptOptionResponse
     */
    roleIds: any | null;
    /**
     * 
     * @type {any}
     * @memberof OnboardingPromptOptionResponse
     */
    channelIds: any | null;
}

/**
 * Check if a given object implements the OnboardingPromptOptionResponse interface.
 */
export function instanceOfOnboardingPromptOptionResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "emoji" in value;
    isInstance = isInstance && "roleIds" in value;
    isInstance = isInstance && "channelIds" in value;

    return isInstance;
}

export function OnboardingPromptOptionResponseFromJSON(json: any): OnboardingPromptOptionResponse {
    return OnboardingPromptOptionResponseFromJSONTyped(json, false);
}

export function OnboardingPromptOptionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): OnboardingPromptOptionResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': json['description'],
        'emoji': SettingsEmojiResponseFromJSON(json['emoji']),
        'roleIds': json['role_ids'],
        'channelIds': json['channel_ids'],
    };
}

export function OnboardingPromptOptionResponseToJSON(value?: OnboardingPromptOptionResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'description': value.description,
        'emoji': SettingsEmojiResponseToJSON(value.emoji),
        'role_ids': value.roleIds,
        'channel_ids': value.channelIds,
    };
}

