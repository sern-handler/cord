/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StringSelect
 */
export interface StringSelect {
    /**
     * 
     * @type {any}
     * @memberof StringSelect
     */
    type: any | null;
    /**
     * 
     * @type {any}
     * @memberof StringSelect
     */
    customId: any | null;
    /**
     * 
     * @type {any}
     * @memberof StringSelect
     */
    placeholder?: any | null;
    /**
     * 
     * @type {any}
     * @memberof StringSelect
     */
    minValues?: any | null;
    /**
     * 
     * @type {any}
     * @memberof StringSelect
     */
    maxValues?: any | null;
    /**
     * 
     * @type {any}
     * @memberof StringSelect
     */
    disabled?: any | null;
    /**
     * 
     * @type {any}
     * @memberof StringSelect
     */
    options: any | null;
}

/**
 * Check if a given object implements the StringSelect interface.
 */
export function instanceOfStringSelect(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "customId" in value;
    isInstance = isInstance && "options" in value;

    return isInstance;
}

export function StringSelectFromJSON(json: any): StringSelect {
    return StringSelectFromJSONTyped(json, false);
}

export function StringSelectFromJSONTyped(json: any, ignoreDiscriminator: boolean): StringSelect {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'customId': json['custom_id'],
        'placeholder': !exists(json, 'placeholder') ? undefined : json['placeholder'],
        'minValues': !exists(json, 'min_values') ? undefined : json['min_values'],
        'maxValues': !exists(json, 'max_values') ? undefined : json['max_values'],
        'disabled': !exists(json, 'disabled') ? undefined : json['disabled'],
        'options': json['options'],
    };
}

export function StringSelectToJSON(value?: StringSelect | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'custom_id': value.customId,
        'placeholder': value.placeholder,
        'min_values': value.minValues,
        'max_values': value.maxValues,
        'disabled': value.disabled,
        'options': value.options,
    };
}

