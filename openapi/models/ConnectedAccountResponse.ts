/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConnectedAccountResponse
 */
export interface ConnectedAccountResponse {
    /**
     * 
     * @type {any}
     * @memberof ConnectedAccountResponse
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConnectedAccountResponse
     */
    name?: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConnectedAccountResponse
     */
    type: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConnectedAccountResponse
     */
    friendSync: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConnectedAccountResponse
     */
    integrations?: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConnectedAccountResponse
     */
    showActivity: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConnectedAccountResponse
     */
    twoWayLink: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConnectedAccountResponse
     */
    verified: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConnectedAccountResponse
     */
    visibility: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConnectedAccountResponse
     */
    revoked?: any | null;
}

/**
 * Check if a given object implements the ConnectedAccountResponse interface.
 */
export function instanceOfConnectedAccountResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "friendSync" in value;
    isInstance = isInstance && "showActivity" in value;
    isInstance = isInstance && "twoWayLink" in value;
    isInstance = isInstance && "verified" in value;
    isInstance = isInstance && "visibility" in value;

    return isInstance;
}

export function ConnectedAccountResponseFromJSON(json: any): ConnectedAccountResponse {
    return ConnectedAccountResponseFromJSONTyped(json, false);
}

export function ConnectedAccountResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectedAccountResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'type': json['type'],
        'friendSync': json['friend_sync'],
        'integrations': !exists(json, 'integrations') ? undefined : json['integrations'],
        'showActivity': json['show_activity'],
        'twoWayLink': json['two_way_link'],
        'verified': json['verified'],
        'visibility': json['visibility'],
        'revoked': !exists(json, 'revoked') ? undefined : json['revoked'],
    };
}

export function ConnectedAccountResponseToJSON(value?: ConnectedAccountResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'type': value.type,
        'friend_sync': value.friendSync,
        'integrations': value.integrations,
        'show_activity': value.showActivity,
        'two_way_link': value.twoWayLink,
        'verified': value.verified,
        'visibility': value.visibility,
        'revoked': value.revoked,
    };
}

