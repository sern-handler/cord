/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MentionSpamUpsertRequest
 */
export interface MentionSpamUpsertRequest {
    /**
     * 
     * @type {any}
     * @memberof MentionSpamUpsertRequest
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof MentionSpamUpsertRequest
     */
    eventType: any | null;
    /**
     * 
     * @type {any}
     * @memberof MentionSpamUpsertRequest
     */
    actions?: any | null;
    /**
     * 
     * @type {any}
     * @memberof MentionSpamUpsertRequest
     */
    enabled?: any | null;
    /**
     * 
     * @type {any}
     * @memberof MentionSpamUpsertRequest
     */
    exemptRoles?: any | null;
    /**
     * 
     * @type {any}
     * @memberof MentionSpamUpsertRequest
     */
    exemptChannels?: any | null;
    /**
     * 
     * @type {any}
     * @memberof MentionSpamUpsertRequest
     */
    triggerType: any | null;
    /**
     * 
     * @type {any}
     * @memberof MentionSpamUpsertRequest
     */
    triggerMetadata?: any | null;
}

/**
 * Check if a given object implements the MentionSpamUpsertRequest interface.
 */
export function instanceOfMentionSpamUpsertRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "eventType" in value;
    isInstance = isInstance && "triggerType" in value;

    return isInstance;
}

export function MentionSpamUpsertRequestFromJSON(json: any): MentionSpamUpsertRequest {
    return MentionSpamUpsertRequestFromJSONTyped(json, false);
}

export function MentionSpamUpsertRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): MentionSpamUpsertRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'eventType': json['event_type'],
        'actions': !exists(json, 'actions') ? undefined : json['actions'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'exemptRoles': !exists(json, 'exempt_roles') ? undefined : json['exempt_roles'],
        'exemptChannels': !exists(json, 'exempt_channels') ? undefined : json['exempt_channels'],
        'triggerType': json['trigger_type'],
        'triggerMetadata': !exists(json, 'trigger_metadata') ? undefined : json['trigger_metadata'],
    };
}

export function MentionSpamUpsertRequestToJSON(value?: MentionSpamUpsertRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'event_type': value.eventType,
        'actions': value.actions,
        'enabled': value.enabled,
        'exempt_roles': value.exemptRoles,
        'exempt_channels': value.exemptChannels,
        'trigger_type': value.triggerType,
        'trigger_metadata': value.triggerMetadata,
    };
}

