/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SelectOption
 */
export interface SelectOption {
    /**
     * 
     * @type {any}
     * @memberof SelectOption
     */
    label: any | null;
    /**
     * 
     * @type {any}
     * @memberof SelectOption
     */
    value: any | null;
    /**
     * 
     * @type {any}
     * @memberof SelectOption
     */
    description?: any | null;
    /**
     * 
     * @type {any}
     * @memberof SelectOption
     */
    emoji?: any | null;
    /**
     * 
     * @type {any}
     * @memberof SelectOption
     */
    _default?: any | null;
}

/**
 * Check if a given object implements the SelectOption interface.
 */
export function instanceOfSelectOption(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function SelectOptionFromJSON(json: any): SelectOption {
    return SelectOptionFromJSONTyped(json, false);
}

export function SelectOptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): SelectOption {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'label': json['label'],
        'value': json['value'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'emoji': !exists(json, 'emoji') ? undefined : json['emoji'],
        '_default': !exists(json, 'default') ? undefined : json['default'],
    };
}

export function SelectOptionToJSON(value?: SelectOption | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'label': value.label,
        'value': value.value,
        'description': value.description,
        'emoji': value.emoji,
        'default': value._default,
    };
}

