/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StageInstanceResponse
 */
export interface StageInstanceResponse {
    /**
     * 
     * @type {any}
     * @memberof StageInstanceResponse
     */
    guildId: any | null;
    /**
     * 
     * @type {any}
     * @memberof StageInstanceResponse
     */
    channelId: any | null;
    /**
     * 
     * @type {any}
     * @memberof StageInstanceResponse
     */
    topic: any | null;
    /**
     * 
     * @type {any}
     * @memberof StageInstanceResponse
     */
    privacyLevel: any | null;
    /**
     * 
     * @type {any}
     * @memberof StageInstanceResponse
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof StageInstanceResponse
     */
    discoverableDisabled?: any | null;
    /**
     * 
     * @type {any}
     * @memberof StageInstanceResponse
     */
    guildScheduledEventId?: any | null;
}

/**
 * Check if a given object implements the StageInstanceResponse interface.
 */
export function instanceOfStageInstanceResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "guildId" in value;
    isInstance = isInstance && "channelId" in value;
    isInstance = isInstance && "topic" in value;
    isInstance = isInstance && "privacyLevel" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function StageInstanceResponseFromJSON(json: any): StageInstanceResponse {
    return StageInstanceResponseFromJSONTyped(json, false);
}

export function StageInstanceResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): StageInstanceResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'guildId': json['guild_id'],
        'channelId': json['channel_id'],
        'topic': json['topic'],
        'privacyLevel': json['privacy_level'],
        'id': json['id'],
        'discoverableDisabled': !exists(json, 'discoverable_disabled') ? undefined : json['discoverable_disabled'],
        'guildScheduledEventId': !exists(json, 'guild_scheduled_event_id') ? undefined : json['guild_scheduled_event_id'],
    };
}

export function StageInstanceResponseToJSON(value?: StageInstanceResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'guild_id': value.guildId,
        'channel_id': value.channelId,
        'topic': value.topic,
        'privacy_level': value.privacyLevel,
        'id': value.id,
        'discoverable_disabled': value.discoverableDisabled,
        'guild_scheduled_event_id': value.guildScheduledEventId,
    };
}

