/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GithubUser } from './GithubUser';
import {
    GithubUserFromJSON,
    GithubUserFromJSONTyped,
    GithubUserToJSON,
} from './GithubUser';

/**
 * 
 * @export
 * @interface GithubRelease
 */
export interface GithubRelease {
    /**
     * 
     * @type {any}
     * @memberof GithubRelease
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubRelease
     */
    tagName: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubRelease
     */
    htmlUrl: any | null;
    /**
     * 
     * @type {GithubUser}
     * @memberof GithubRelease
     */
    author: GithubUser;
}

/**
 * Check if a given object implements the GithubRelease interface.
 */
export function instanceOfGithubRelease(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "tagName" in value;
    isInstance = isInstance && "htmlUrl" in value;
    isInstance = isInstance && "author" in value;

    return isInstance;
}

export function GithubReleaseFromJSON(json: any): GithubRelease {
    return GithubReleaseFromJSONTyped(json, false);
}

export function GithubReleaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GithubRelease {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tagName': json['tag_name'],
        'htmlUrl': json['html_url'],
        'author': GithubUserFromJSON(json['author']),
    };
}

export function GithubReleaseToJSON(value?: GithubRelease | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'tag_name': value.tagName,
        'html_url': value.htmlUrl,
        'author': GithubUserToJSON(value.author),
    };
}

