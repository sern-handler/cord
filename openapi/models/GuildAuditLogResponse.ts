/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GuildAuditLogResponse
 */
export interface GuildAuditLogResponse {
    /**
     * 
     * @type {any}
     * @memberof GuildAuditLogResponse
     */
    auditLogEntries: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildAuditLogResponse
     */
    users: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildAuditLogResponse
     */
    integrations: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildAuditLogResponse
     */
    webhooks: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildAuditLogResponse
     */
    guildScheduledEvents: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildAuditLogResponse
     */
    threads: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildAuditLogResponse
     */
    applicationCommands: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildAuditLogResponse
     */
    autoModerationRules: any | null;
}

/**
 * Check if a given object implements the GuildAuditLogResponse interface.
 */
export function instanceOfGuildAuditLogResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "auditLogEntries" in value;
    isInstance = isInstance && "users" in value;
    isInstance = isInstance && "integrations" in value;
    isInstance = isInstance && "webhooks" in value;
    isInstance = isInstance && "guildScheduledEvents" in value;
    isInstance = isInstance && "threads" in value;
    isInstance = isInstance && "applicationCommands" in value;
    isInstance = isInstance && "autoModerationRules" in value;

    return isInstance;
}

export function GuildAuditLogResponseFromJSON(json: any): GuildAuditLogResponse {
    return GuildAuditLogResponseFromJSONTyped(json, false);
}

export function GuildAuditLogResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GuildAuditLogResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'auditLogEntries': json['audit_log_entries'],
        'users': json['users'],
        'integrations': json['integrations'],
        'webhooks': json['webhooks'],
        'guildScheduledEvents': json['guild_scheduled_events'],
        'threads': json['threads'],
        'applicationCommands': json['application_commands'],
        'autoModerationRules': json['auto_moderation_rules'],
    };
}

export function GuildAuditLogResponseToJSON(value?: GuildAuditLogResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'audit_log_entries': value.auditLogEntries,
        'users': value.users,
        'integrations': value.integrations,
        'webhooks': value.webhooks,
        'guild_scheduled_events': value.guildScheduledEvents,
        'threads': value.threads,
        'application_commands': value.applicationCommands,
        'auto_moderation_rules': value.autoModerationRules,
    };
}

