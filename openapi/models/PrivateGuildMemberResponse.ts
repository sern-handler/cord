/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserResponse } from './UserResponse';
import {
    UserResponseFromJSON,
    UserResponseFromJSONTyped,
    UserResponseToJSON,
} from './UserResponse';

/**
 * 
 * @export
 * @interface PrivateGuildMemberResponse
 */
export interface PrivateGuildMemberResponse {
    /**
     * 
     * @type {any}
     * @memberof PrivateGuildMemberResponse
     */
    avatar?: any | null;
    /**
     * 
     * @type {any}
     * @memberof PrivateGuildMemberResponse
     */
    communicationDisabledUntil?: any | null;
    /**
     * 
     * @type {any}
     * @memberof PrivateGuildMemberResponse
     */
    flags: any | null;
    /**
     * 
     * @type {any}
     * @memberof PrivateGuildMemberResponse
     */
    joinedAt: any | null;
    /**
     * 
     * @type {any}
     * @memberof PrivateGuildMemberResponse
     */
    nick?: any | null;
    /**
     * 
     * @type {any}
     * @memberof PrivateGuildMemberResponse
     */
    pending: any | null;
    /**
     * 
     * @type {any}
     * @memberof PrivateGuildMemberResponse
     */
    premiumSince?: any | null;
    /**
     * 
     * @type {any}
     * @memberof PrivateGuildMemberResponse
     */
    roles: any | null;
    /**
     * 
     * @type {UserResponse}
     * @memberof PrivateGuildMemberResponse
     */
    user: UserResponse;
    /**
     * 
     * @type {any}
     * @memberof PrivateGuildMemberResponse
     */
    mute: any | null;
    /**
     * 
     * @type {any}
     * @memberof PrivateGuildMemberResponse
     */
    deaf: any | null;
    /**
     * 
     * @type {any}
     * @memberof PrivateGuildMemberResponse
     */
    banner?: any | null;
}

/**
 * Check if a given object implements the PrivateGuildMemberResponse interface.
 */
export function instanceOfPrivateGuildMemberResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "flags" in value;
    isInstance = isInstance && "joinedAt" in value;
    isInstance = isInstance && "pending" in value;
    isInstance = isInstance && "roles" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "mute" in value;
    isInstance = isInstance && "deaf" in value;

    return isInstance;
}

export function PrivateGuildMemberResponseFromJSON(json: any): PrivateGuildMemberResponse {
    return PrivateGuildMemberResponseFromJSONTyped(json, false);
}

export function PrivateGuildMemberResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrivateGuildMemberResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'avatar': !exists(json, 'avatar') ? undefined : json['avatar'],
        'communicationDisabledUntil': !exists(json, 'communication_disabled_until') ? undefined : json['communication_disabled_until'],
        'flags': json['flags'],
        'joinedAt': json['joined_at'],
        'nick': !exists(json, 'nick') ? undefined : json['nick'],
        'pending': json['pending'],
        'premiumSince': !exists(json, 'premium_since') ? undefined : json['premium_since'],
        'roles': json['roles'],
        'user': UserResponseFromJSON(json['user']),
        'mute': json['mute'],
        'deaf': json['deaf'],
        'banner': !exists(json, 'banner') ? undefined : json['banner'],
    };
}

export function PrivateGuildMemberResponseToJSON(value?: PrivateGuildMemberResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'avatar': value.avatar,
        'communication_disabled_until': value.communicationDisabledUntil,
        'flags': value.flags,
        'joined_at': value.joinedAt,
        'nick': value.nick,
        'pending': value.pending,
        'premium_since': value.premiumSince,
        'roles': value.roles,
        'user': UserResponseToJSON(value.user),
        'mute': value.mute,
        'deaf': value.deaf,
        'banner': value.banner,
    };
}

