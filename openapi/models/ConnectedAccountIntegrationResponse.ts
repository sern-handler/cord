/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountResponse } from './AccountResponse';
import {
    AccountResponseFromJSON,
    AccountResponseFromJSONTyped,
    AccountResponseToJSON,
} from './AccountResponse';
import type { ConnectedAccountGuildResponse } from './ConnectedAccountGuildResponse';
import {
    ConnectedAccountGuildResponseFromJSON,
    ConnectedAccountGuildResponseFromJSONTyped,
    ConnectedAccountGuildResponseToJSON,
} from './ConnectedAccountGuildResponse';

/**
 * 
 * @export
 * @interface ConnectedAccountIntegrationResponse
 */
export interface ConnectedAccountIntegrationResponse {
    /**
     * 
     * @type {any}
     * @memberof ConnectedAccountIntegrationResponse
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConnectedAccountIntegrationResponse
     */
    type: any | null;
    /**
     * 
     * @type {AccountResponse}
     * @memberof ConnectedAccountIntegrationResponse
     */
    account: AccountResponse;
    /**
     * 
     * @type {ConnectedAccountGuildResponse}
     * @memberof ConnectedAccountIntegrationResponse
     */
    guild: ConnectedAccountGuildResponse;
}

/**
 * Check if a given object implements the ConnectedAccountIntegrationResponse interface.
 */
export function instanceOfConnectedAccountIntegrationResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "account" in value;
    isInstance = isInstance && "guild" in value;

    return isInstance;
}

export function ConnectedAccountIntegrationResponseFromJSON(json: any): ConnectedAccountIntegrationResponse {
    return ConnectedAccountIntegrationResponseFromJSONTyped(json, false);
}

export function ConnectedAccountIntegrationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectedAccountIntegrationResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'account': AccountResponseFromJSON(json['account']),
        'guild': ConnectedAccountGuildResponseFromJSON(json['guild']),
    };
}

export function ConnectedAccountIntegrationResponseToJSON(value?: ConnectedAccountIntegrationResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'account': AccountResponseToJSON(value.account),
        'guild': ConnectedAccountGuildResponseToJSON(value.guild),
    };
}

