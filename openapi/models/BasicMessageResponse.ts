/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserResponse } from './UserResponse';
import {
    UserResponseFromJSON,
    UserResponseFromJSONTyped,
    UserResponseToJSON,
} from './UserResponse';

/**
 * 
 * @export
 * @interface BasicMessageResponse
 */
export interface BasicMessageResponse {
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    type: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    content: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    channelId: any | null;
    /**
     * 
     * @type {UserResponse}
     * @memberof BasicMessageResponse
     */
    author: UserResponse;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    attachments: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    embeds: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    mentions: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    mentionRoles: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    pinned: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    mentionEveryone: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    tts: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    timestamp: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    editedTimestamp?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    flags: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    components: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    activity?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    application?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    applicationId?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    interaction?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    nonce?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    webhookId?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    messageReference?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    thread?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    mentionChannels?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    stickers?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    stickerItems?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    roleSubscriptionData?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicMessageResponse
     */
    position?: any | null;
}

/**
 * Check if a given object implements the BasicMessageResponse interface.
 */
export function instanceOfBasicMessageResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "channelId" in value;
    isInstance = isInstance && "author" in value;
    isInstance = isInstance && "attachments" in value;
    isInstance = isInstance && "embeds" in value;
    isInstance = isInstance && "mentions" in value;
    isInstance = isInstance && "mentionRoles" in value;
    isInstance = isInstance && "pinned" in value;
    isInstance = isInstance && "mentionEveryone" in value;
    isInstance = isInstance && "tts" in value;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "flags" in value;
    isInstance = isInstance && "components" in value;

    return isInstance;
}

export function BasicMessageResponseFromJSON(json: any): BasicMessageResponse {
    return BasicMessageResponseFromJSONTyped(json, false);
}

export function BasicMessageResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): BasicMessageResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'content': json['content'],
        'channelId': json['channel_id'],
        'author': UserResponseFromJSON(json['author']),
        'attachments': json['attachments'],
        'embeds': json['embeds'],
        'mentions': json['mentions'],
        'mentionRoles': json['mention_roles'],
        'pinned': json['pinned'],
        'mentionEveryone': json['mention_everyone'],
        'tts': json['tts'],
        'timestamp': json['timestamp'],
        'editedTimestamp': !exists(json, 'edited_timestamp') ? undefined : json['edited_timestamp'],
        'flags': json['flags'],
        'components': json['components'],
        'activity': !exists(json, 'activity') ? undefined : json['activity'],
        'application': !exists(json, 'application') ? undefined : json['application'],
        'applicationId': !exists(json, 'application_id') ? undefined : json['application_id'],
        'interaction': !exists(json, 'interaction') ? undefined : json['interaction'],
        'nonce': !exists(json, 'nonce') ? undefined : json['nonce'],
        'webhookId': !exists(json, 'webhook_id') ? undefined : json['webhook_id'],
        'messageReference': !exists(json, 'message_reference') ? undefined : json['message_reference'],
        'thread': !exists(json, 'thread') ? undefined : json['thread'],
        'mentionChannels': !exists(json, 'mention_channels') ? undefined : json['mention_channels'],
        'stickers': !exists(json, 'stickers') ? undefined : json['stickers'],
        'stickerItems': !exists(json, 'sticker_items') ? undefined : json['sticker_items'],
        'roleSubscriptionData': !exists(json, 'role_subscription_data') ? undefined : json['role_subscription_data'],
        'position': !exists(json, 'position') ? undefined : json['position'],
    };
}

export function BasicMessageResponseToJSON(value?: BasicMessageResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'content': value.content,
        'channel_id': value.channelId,
        'author': UserResponseToJSON(value.author),
        'attachments': value.attachments,
        'embeds': value.embeds,
        'mentions': value.mentions,
        'mention_roles': value.mentionRoles,
        'pinned': value.pinned,
        'mention_everyone': value.mentionEveryone,
        'tts': value.tts,
        'timestamp': value.timestamp,
        'edited_timestamp': value.editedTimestamp,
        'flags': value.flags,
        'components': value.components,
        'activity': value.activity,
        'application': value.application,
        'application_id': value.applicationId,
        'interaction': value.interaction,
        'nonce': value.nonce,
        'webhook_id': value.webhookId,
        'message_reference': value.messageReference,
        'thread': value.thread,
        'mention_channels': value.mentionChannels,
        'stickers': value.stickers,
        'sticker_items': value.stickerItems,
        'role_subscription_data': value.roleSubscriptionData,
        'position': value.position,
    };
}

