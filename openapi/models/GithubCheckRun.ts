/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GithubCheckSuite } from './GithubCheckSuite';
import {
    GithubCheckSuiteFromJSON,
    GithubCheckSuiteFromJSONTyped,
    GithubCheckSuiteToJSON,
} from './GithubCheckSuite';

/**
 * 
 * @export
 * @interface GithubCheckRun
 */
export interface GithubCheckRun {
    /**
     * 
     * @type {any}
     * @memberof GithubCheckRun
     */
    conclusion?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubCheckRun
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubCheckRun
     */
    htmlUrl: any | null;
    /**
     * 
     * @type {GithubCheckSuite}
     * @memberof GithubCheckRun
     */
    checkSuite: GithubCheckSuite;
    /**
     * 
     * @type {any}
     * @memberof GithubCheckRun
     */
    detailsUrl?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubCheckRun
     */
    output?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubCheckRun
     */
    pullRequests?: any | null;
}

/**
 * Check if a given object implements the GithubCheckRun interface.
 */
export function instanceOfGithubCheckRun(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "htmlUrl" in value;
    isInstance = isInstance && "checkSuite" in value;

    return isInstance;
}

export function GithubCheckRunFromJSON(json: any): GithubCheckRun {
    return GithubCheckRunFromJSONTyped(json, false);
}

export function GithubCheckRunFromJSONTyped(json: any, ignoreDiscriminator: boolean): GithubCheckRun {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conclusion': !exists(json, 'conclusion') ? undefined : json['conclusion'],
        'name': json['name'],
        'htmlUrl': json['html_url'],
        'checkSuite': GithubCheckSuiteFromJSON(json['check_suite']),
        'detailsUrl': !exists(json, 'details_url') ? undefined : json['details_url'],
        'output': !exists(json, 'output') ? undefined : json['output'],
        'pullRequests': !exists(json, 'pull_requests') ? undefined : json['pull_requests'],
    };
}

export function GithubCheckRunToJSON(value?: GithubCheckRun | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'conclusion': value.conclusion,
        'name': value.name,
        'html_url': value.htmlUrl,
        'check_suite': GithubCheckSuiteToJSON(value.checkSuite),
        'details_url': value.detailsUrl,
        'output': value.output,
        'pull_requests': value.pullRequests,
    };
}

