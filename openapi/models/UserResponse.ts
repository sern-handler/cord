/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {any}
     * @memberof UserResponse
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof UserResponse
     */
    username: any | null;
    /**
     * 
     * @type {any}
     * @memberof UserResponse
     */
    avatar?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UserResponse
     */
    discriminator: any | null;
    /**
     * 
     * @type {any}
     * @memberof UserResponse
     */
    publicFlags: any | null;
    /**
     * 
     * @type {any}
     * @memberof UserResponse
     */
    flags: any | null;
    /**
     * 
     * @type {any}
     * @memberof UserResponse
     */
    bot?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UserResponse
     */
    system?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UserResponse
     */
    banner?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UserResponse
     */
    accentColor?: any | null;
}

/**
 * Check if a given object implements the UserResponse interface.
 */
export function instanceOfUserResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "discriminator" in value;
    isInstance = isInstance && "publicFlags" in value;
    isInstance = isInstance && "flags" in value;

    return isInstance;
}

export function UserResponseFromJSON(json: any): UserResponse {
    return UserResponseFromJSONTyped(json, false);
}

export function UserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'username': json['username'],
        'avatar': !exists(json, 'avatar') ? undefined : json['avatar'],
        'discriminator': json['discriminator'],
        'publicFlags': json['public_flags'],
        'flags': json['flags'],
        'bot': !exists(json, 'bot') ? undefined : json['bot'],
        'system': !exists(json, 'system') ? undefined : json['system'],
        'banner': !exists(json, 'banner') ? undefined : json['banner'],
        'accentColor': !exists(json, 'accent_color') ? undefined : json['accent_color'],
    };
}

export function UserResponseToJSON(value?: UserResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'username': value.username,
        'avatar': value.avatar,
        'discriminator': value.discriminator,
        'public_flags': value.publicFlags,
        'flags': value.flags,
        'bot': value.bot,
        'system': value.system,
        'banner': value.banner,
        'accent_color': value.accentColor,
    };
}

