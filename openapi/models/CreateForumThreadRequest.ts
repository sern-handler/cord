/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BaseCreateMessageCreateRequest } from './BaseCreateMessageCreateRequest';
import {
    BaseCreateMessageCreateRequestFromJSON,
    BaseCreateMessageCreateRequestFromJSONTyped,
    BaseCreateMessageCreateRequestToJSON,
} from './BaseCreateMessageCreateRequest';

/**
 * 
 * @export
 * @interface CreateForumThreadRequest
 */
export interface CreateForumThreadRequest {
    /**
     * 
     * @type {any}
     * @memberof CreateForumThreadRequest
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof CreateForumThreadRequest
     */
    autoArchiveDuration?: any | null;
    /**
     * 
     * @type {any}
     * @memberof CreateForumThreadRequest
     */
    rateLimitPerUser?: any | null;
    /**
     * 
     * @type {any}
     * @memberof CreateForumThreadRequest
     */
    appliedTags?: any | null;
    /**
     * 
     * @type {BaseCreateMessageCreateRequest}
     * @memberof CreateForumThreadRequest
     */
    message: BaseCreateMessageCreateRequest;
}

/**
 * Check if a given object implements the CreateForumThreadRequest interface.
 */
export function instanceOfCreateForumThreadRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function CreateForumThreadRequestFromJSON(json: any): CreateForumThreadRequest {
    return CreateForumThreadRequestFromJSONTyped(json, false);
}

export function CreateForumThreadRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateForumThreadRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'autoArchiveDuration': !exists(json, 'auto_archive_duration') ? undefined : json['auto_archive_duration'],
        'rateLimitPerUser': !exists(json, 'rate_limit_per_user') ? undefined : json['rate_limit_per_user'],
        'appliedTags': !exists(json, 'applied_tags') ? undefined : json['applied_tags'],
        'message': BaseCreateMessageCreateRequestFromJSON(json['message']),
    };
}

export function CreateForumThreadRequestToJSON(value?: CreateForumThreadRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'auto_archive_duration': value.autoArchiveDuration,
        'rate_limit_per_user': value.rateLimitPerUser,
        'applied_tags': value.appliedTags,
        'message': BaseCreateMessageCreateRequestToJSON(value.message),
    };
}

