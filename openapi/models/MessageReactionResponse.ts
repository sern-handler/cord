/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MessageReactionCountDetailsResponse } from './MessageReactionCountDetailsResponse';
import {
    MessageReactionCountDetailsResponseFromJSON,
    MessageReactionCountDetailsResponseFromJSONTyped,
    MessageReactionCountDetailsResponseToJSON,
} from './MessageReactionCountDetailsResponse';
import type { MessageReactionEmojiResponse } from './MessageReactionEmojiResponse';
import {
    MessageReactionEmojiResponseFromJSON,
    MessageReactionEmojiResponseFromJSONTyped,
    MessageReactionEmojiResponseToJSON,
} from './MessageReactionEmojiResponse';

/**
 * 
 * @export
 * @interface MessageReactionResponse
 */
export interface MessageReactionResponse {
    /**
     * 
     * @type {MessageReactionEmojiResponse}
     * @memberof MessageReactionResponse
     */
    emoji: MessageReactionEmojiResponse;
    /**
     * 
     * @type {any}
     * @memberof MessageReactionResponse
     */
    count: any | null;
    /**
     * 
     * @type {MessageReactionCountDetailsResponse}
     * @memberof MessageReactionResponse
     */
    countDetails: MessageReactionCountDetailsResponse;
    /**
     * 
     * @type {any}
     * @memberof MessageReactionResponse
     */
    burstColors: any | null;
    /**
     * 
     * @type {any}
     * @memberof MessageReactionResponse
     */
    meBurst: any | null;
    /**
     * 
     * @type {any}
     * @memberof MessageReactionResponse
     */
    me: any | null;
}

/**
 * Check if a given object implements the MessageReactionResponse interface.
 */
export function instanceOfMessageReactionResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "emoji" in value;
    isInstance = isInstance && "count" in value;
    isInstance = isInstance && "countDetails" in value;
    isInstance = isInstance && "burstColors" in value;
    isInstance = isInstance && "meBurst" in value;
    isInstance = isInstance && "me" in value;

    return isInstance;
}

export function MessageReactionResponseFromJSON(json: any): MessageReactionResponse {
    return MessageReactionResponseFromJSONTyped(json, false);
}

export function MessageReactionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageReactionResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'emoji': MessageReactionEmojiResponseFromJSON(json['emoji']),
        'count': json['count'],
        'countDetails': MessageReactionCountDetailsResponseFromJSON(json['count_details']),
        'burstColors': json['burst_colors'],
        'meBurst': json['me_burst'],
        'me': json['me'],
    };
}

export function MessageReactionResponseToJSON(value?: MessageReactionResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'emoji': MessageReactionEmojiResponseToJSON(value.emoji),
        'count': value.count,
        'count_details': MessageReactionCountDetailsResponseToJSON(value.countDetails),
        'burst_colors': value.burstColors,
        'me_burst': value.meBurst,
        'me': value.me,
    };
}

