/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GithubCheckApp } from './GithubCheckApp';
import {
    GithubCheckAppFromJSON,
    GithubCheckAppFromJSONTyped,
    GithubCheckAppToJSON,
} from './GithubCheckApp';

/**
 * 
 * @export
 * @interface GithubCheckSuite
 */
export interface GithubCheckSuite {
    /**
     * 
     * @type {any}
     * @memberof GithubCheckSuite
     */
    conclusion?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubCheckSuite
     */
    headBranch?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubCheckSuite
     */
    headSha: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubCheckSuite
     */
    pullRequests?: any | null;
    /**
     * 
     * @type {GithubCheckApp}
     * @memberof GithubCheckSuite
     */
    app: GithubCheckApp;
}

/**
 * Check if a given object implements the GithubCheckSuite interface.
 */
export function instanceOfGithubCheckSuite(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "headSha" in value;
    isInstance = isInstance && "app" in value;

    return isInstance;
}

export function GithubCheckSuiteFromJSON(json: any): GithubCheckSuite {
    return GithubCheckSuiteFromJSONTyped(json, false);
}

export function GithubCheckSuiteFromJSONTyped(json: any, ignoreDiscriminator: boolean): GithubCheckSuite {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conclusion': !exists(json, 'conclusion') ? undefined : json['conclusion'],
        'headBranch': !exists(json, 'head_branch') ? undefined : json['head_branch'],
        'headSha': json['head_sha'],
        'pullRequests': !exists(json, 'pull_requests') ? undefined : json['pull_requests'],
        'app': GithubCheckAppFromJSON(json['app']),
    };
}

export function GithubCheckSuiteToJSON(value?: GithubCheckSuite | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'conclusion': value.conclusion,
        'head_branch': value.headBranch,
        'head_sha': value.headSha,
        'pull_requests': value.pullRequests,
        'app': GithubCheckAppToJSON(value.app),
    };
}

