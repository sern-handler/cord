/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MessageAttachmentResponse
 */
export interface MessageAttachmentResponse {
    /**
     * 
     * @type {any}
     * @memberof MessageAttachmentResponse
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof MessageAttachmentResponse
     */
    filename: any | null;
    /**
     * 
     * @type {any}
     * @memberof MessageAttachmentResponse
     */
    size: any | null;
    /**
     * 
     * @type {any}
     * @memberof MessageAttachmentResponse
     */
    url: any | null;
    /**
     * 
     * @type {any}
     * @memberof MessageAttachmentResponse
     */
    proxyUrl: any | null;
    /**
     * 
     * @type {any}
     * @memberof MessageAttachmentResponse
     */
    width?: any | null;
    /**
     * 
     * @type {any}
     * @memberof MessageAttachmentResponse
     */
    height?: any | null;
    /**
     * 
     * @type {any}
     * @memberof MessageAttachmentResponse
     */
    durationSecs?: any | null;
    /**
     * 
     * @type {any}
     * @memberof MessageAttachmentResponse
     */
    waveform?: any | null;
    /**
     * 
     * @type {any}
     * @memberof MessageAttachmentResponse
     */
    description?: any | null;
    /**
     * 
     * @type {any}
     * @memberof MessageAttachmentResponse
     */
    contentType?: any | null;
    /**
     * 
     * @type {any}
     * @memberof MessageAttachmentResponse
     */
    ephemeral?: any | null;
}

/**
 * Check if a given object implements the MessageAttachmentResponse interface.
 */
export function instanceOfMessageAttachmentResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "filename" in value;
    isInstance = isInstance && "size" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "proxyUrl" in value;

    return isInstance;
}

export function MessageAttachmentResponseFromJSON(json: any): MessageAttachmentResponse {
    return MessageAttachmentResponseFromJSONTyped(json, false);
}

export function MessageAttachmentResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageAttachmentResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'filename': json['filename'],
        'size': json['size'],
        'url': json['url'],
        'proxyUrl': json['proxy_url'],
        'width': !exists(json, 'width') ? undefined : json['width'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'durationSecs': !exists(json, 'duration_secs') ? undefined : json['duration_secs'],
        'waveform': !exists(json, 'waveform') ? undefined : json['waveform'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'contentType': !exists(json, 'content_type') ? undefined : json['content_type'],
        'ephemeral': !exists(json, 'ephemeral') ? undefined : json['ephemeral'],
    };
}

export function MessageAttachmentResponseToJSON(value?: MessageAttachmentResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'filename': value.filename,
        'size': value.size,
        'url': value.url,
        'proxy_url': value.proxyUrl,
        'width': value.width,
        'height': value.height,
        'duration_secs': value.durationSecs,
        'waveform': value.waveform,
        'description': value.description,
        'content_type': value.contentType,
        'ephemeral': value.ephemeral,
    };
}

