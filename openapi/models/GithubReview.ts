/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GithubUser } from './GithubUser';
import {
    GithubUserFromJSON,
    GithubUserFromJSONTyped,
    GithubUserToJSON,
} from './GithubUser';

/**
 * 
 * @export
 * @interface GithubReview
 */
export interface GithubReview {
    /**
     * 
     * @type {GithubUser}
     * @memberof GithubReview
     */
    user: GithubUser;
    /**
     * 
     * @type {any}
     * @memberof GithubReview
     */
    body?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubReview
     */
    htmlUrl: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubReview
     */
    state: any | null;
}

/**
 * Check if a given object implements the GithubReview interface.
 */
export function instanceOfGithubReview(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "htmlUrl" in value;
    isInstance = isInstance && "state" in value;

    return isInstance;
}

export function GithubReviewFromJSON(json: any): GithubReview {
    return GithubReviewFromJSONTyped(json, false);
}

export function GithubReviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): GithubReview {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'user': GithubUserFromJSON(json['user']),
        'body': !exists(json, 'body') ? undefined : json['body'],
        'htmlUrl': json['html_url'],
        'state': json['state'],
    };
}

export function GithubReviewToJSON(value?: GithubReview | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'user': GithubUserToJSON(value.user),
        'body': value.body,
        'html_url': value.htmlUrl,
        'state': value.state,
    };
}

