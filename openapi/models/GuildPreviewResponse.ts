/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GuildPreviewResponse
 */
export interface GuildPreviewResponse {
    /**
     * 
     * @type {any}
     * @memberof GuildPreviewResponse
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildPreviewResponse
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildPreviewResponse
     */
    icon?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildPreviewResponse
     */
    description?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildPreviewResponse
     */
    homeHeader?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildPreviewResponse
     */
    splash?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildPreviewResponse
     */
    discoverySplash?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildPreviewResponse
     */
    features: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildPreviewResponse
     */
    approximateMemberCount: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildPreviewResponse
     */
    approximatePresenceCount: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildPreviewResponse
     */
    emojis: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildPreviewResponse
     */
    stickers: any | null;
}

/**
 * Check if a given object implements the GuildPreviewResponse interface.
 */
export function instanceOfGuildPreviewResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "features" in value;
    isInstance = isInstance && "approximateMemberCount" in value;
    isInstance = isInstance && "approximatePresenceCount" in value;
    isInstance = isInstance && "emojis" in value;
    isInstance = isInstance && "stickers" in value;

    return isInstance;
}

export function GuildPreviewResponseFromJSON(json: any): GuildPreviewResponse {
    return GuildPreviewResponseFromJSONTyped(json, false);
}

export function GuildPreviewResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GuildPreviewResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'icon': !exists(json, 'icon') ? undefined : json['icon'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'homeHeader': !exists(json, 'home_header') ? undefined : json['home_header'],
        'splash': !exists(json, 'splash') ? undefined : json['splash'],
        'discoverySplash': !exists(json, 'discovery_splash') ? undefined : json['discovery_splash'],
        'features': json['features'],
        'approximateMemberCount': json['approximate_member_count'],
        'approximatePresenceCount': json['approximate_presence_count'],
        'emojis': json['emojis'],
        'stickers': json['stickers'],
    };
}

export function GuildPreviewResponseToJSON(value?: GuildPreviewResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'icon': value.icon,
        'description': value.description,
        'home_header': value.homeHeader,
        'splash': value.splash,
        'discovery_splash': value.discoverySplash,
        'features': value.features,
        'approximate_member_count': value.approximateMemberCount,
        'approximate_presence_count': value.approximatePresenceCount,
        'emojis': value.emojis,
        'stickers': value.stickers,
    };
}

