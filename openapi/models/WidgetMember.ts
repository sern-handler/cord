/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WidgetMember
 */
export interface WidgetMember {
    /**
     * 
     * @type {any}
     * @memberof WidgetMember
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof WidgetMember
     */
    username: any | null;
    /**
     * 
     * @type {any}
     * @memberof WidgetMember
     */
    discriminator: any | null;
    /**
     * 
     * @type {any}
     * @memberof WidgetMember
     */
    avatar?: any | null;
    /**
     * 
     * @type {any}
     * @memberof WidgetMember
     */
    status: any | null;
    /**
     * 
     * @type {any}
     * @memberof WidgetMember
     */
    avatarUrl: any | null;
    /**
     * 
     * @type {any}
     * @memberof WidgetMember
     */
    activity?: any | null;
    /**
     * 
     * @type {any}
     * @memberof WidgetMember
     */
    deaf?: any | null;
    /**
     * 
     * @type {any}
     * @memberof WidgetMember
     */
    mute?: any | null;
    /**
     * 
     * @type {any}
     * @memberof WidgetMember
     */
    selfDeaf?: any | null;
    /**
     * 
     * @type {any}
     * @memberof WidgetMember
     */
    selfMute?: any | null;
    /**
     * 
     * @type {any}
     * @memberof WidgetMember
     */
    suppress?: any | null;
    /**
     * 
     * @type {any}
     * @memberof WidgetMember
     */
    channelId?: any | null;
}

/**
 * Check if a given object implements the WidgetMember interface.
 */
export function instanceOfWidgetMember(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "discriminator" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "avatarUrl" in value;

    return isInstance;
}

export function WidgetMemberFromJSON(json: any): WidgetMember {
    return WidgetMemberFromJSONTyped(json, false);
}

export function WidgetMemberFromJSONTyped(json: any, ignoreDiscriminator: boolean): WidgetMember {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'username': json['username'],
        'discriminator': json['discriminator'],
        'avatar': !exists(json, 'avatar') ? undefined : json['avatar'],
        'status': json['status'],
        'avatarUrl': json['avatar_url'],
        'activity': !exists(json, 'activity') ? undefined : json['activity'],
        'deaf': !exists(json, 'deaf') ? undefined : json['deaf'],
        'mute': !exists(json, 'mute') ? undefined : json['mute'],
        'selfDeaf': !exists(json, 'self_deaf') ? undefined : json['self_deaf'],
        'selfMute': !exists(json, 'self_mute') ? undefined : json['self_mute'],
        'suppress': !exists(json, 'suppress') ? undefined : json['suppress'],
        'channelId': !exists(json, 'channel_id') ? undefined : json['channel_id'],
    };
}

export function WidgetMemberToJSON(value?: WidgetMember | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'username': value.username,
        'discriminator': value.discriminator,
        'avatar': value.avatar,
        'status': value.status,
        'avatar_url': value.avatarUrl,
        'activity': value.activity,
        'deaf': value.deaf,
        'mute': value.mute,
        'self_deaf': value.selfDeaf,
        'self_mute': value.selfMute,
        'suppress': value.suppress,
        'channel_id': value.channelId,
    };
}

