/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateThreadRequestPartial
 */
export interface UpdateThreadRequestPartial {
    /**
     * 
     * @type {any}
     * @memberof UpdateThreadRequestPartial
     */
    name?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UpdateThreadRequestPartial
     */
    archived?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UpdateThreadRequestPartial
     */
    locked?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UpdateThreadRequestPartial
     */
    invitable?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UpdateThreadRequestPartial
     */
    autoArchiveDuration?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UpdateThreadRequestPartial
     */
    rateLimitPerUser?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UpdateThreadRequestPartial
     */
    flags?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UpdateThreadRequestPartial
     */
    appliedTags?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UpdateThreadRequestPartial
     */
    bitrate?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UpdateThreadRequestPartial
     */
    userLimit?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UpdateThreadRequestPartial
     */
    rtcRegion?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UpdateThreadRequestPartial
     */
    videoQualityMode?: any | null;
}

/**
 * Check if a given object implements the UpdateThreadRequestPartial interface.
 */
export function instanceOfUpdateThreadRequestPartial(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpdateThreadRequestPartialFromJSON(json: any): UpdateThreadRequestPartial {
    return UpdateThreadRequestPartialFromJSONTyped(json, false);
}

export function UpdateThreadRequestPartialFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateThreadRequestPartial {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'archived': !exists(json, 'archived') ? undefined : json['archived'],
        'locked': !exists(json, 'locked') ? undefined : json['locked'],
        'invitable': !exists(json, 'invitable') ? undefined : json['invitable'],
        'autoArchiveDuration': !exists(json, 'auto_archive_duration') ? undefined : json['auto_archive_duration'],
        'rateLimitPerUser': !exists(json, 'rate_limit_per_user') ? undefined : json['rate_limit_per_user'],
        'flags': !exists(json, 'flags') ? undefined : json['flags'],
        'appliedTags': !exists(json, 'applied_tags') ? undefined : json['applied_tags'],
        'bitrate': !exists(json, 'bitrate') ? undefined : json['bitrate'],
        'userLimit': !exists(json, 'user_limit') ? undefined : json['user_limit'],
        'rtcRegion': !exists(json, 'rtc_region') ? undefined : json['rtc_region'],
        'videoQualityMode': !exists(json, 'video_quality_mode') ? undefined : json['video_quality_mode'],
    };
}

export function UpdateThreadRequestPartialToJSON(value?: UpdateThreadRequestPartial | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'archived': value.archived,
        'locked': value.locked,
        'invitable': value.invitable,
        'auto_archive_duration': value.autoArchiveDuration,
        'rate_limit_per_user': value.rateLimitPerUser,
        'flags': value.flags,
        'applied_tags': value.appliedTags,
        'bitrate': value.bitrate,
        'user_limit': value.userLimit,
        'rtc_region': value.rtcRegion,
        'video_quality_mode': value.videoQualityMode,
    };
}

