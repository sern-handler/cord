/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EmojiResponse
 */
export interface EmojiResponse {
    /**
     * 
     * @type {any}
     * @memberof EmojiResponse
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof EmojiResponse
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof EmojiResponse
     */
    user?: any | null;
    /**
     * 
     * @type {any}
     * @memberof EmojiResponse
     */
    roles: any | null;
    /**
     * 
     * @type {any}
     * @memberof EmojiResponse
     */
    requireColons: any | null;
    /**
     * 
     * @type {any}
     * @memberof EmojiResponse
     */
    managed: any | null;
    /**
     * 
     * @type {any}
     * @memberof EmojiResponse
     */
    animated: any | null;
    /**
     * 
     * @type {any}
     * @memberof EmojiResponse
     */
    available: any | null;
}

/**
 * Check if a given object implements the EmojiResponse interface.
 */
export function instanceOfEmojiResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "roles" in value;
    isInstance = isInstance && "requireColons" in value;
    isInstance = isInstance && "managed" in value;
    isInstance = isInstance && "animated" in value;
    isInstance = isInstance && "available" in value;

    return isInstance;
}

export function EmojiResponseFromJSON(json: any): EmojiResponse {
    return EmojiResponseFromJSONTyped(json, false);
}

export function EmojiResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmojiResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'user': !exists(json, 'user') ? undefined : json['user'],
        'roles': json['roles'],
        'requireColons': json['require_colons'],
        'managed': json['managed'],
        'animated': json['animated'],
        'available': json['available'],
    };
}

export function EmojiResponseToJSON(value?: EmojiResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'user': value.user,
        'roles': value.roles,
        'require_colons': value.requireColons,
        'managed': value.managed,
        'animated': value.animated,
        'available': value.available,
    };
}

