/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GithubAuthor } from './GithubAuthor';
import {
    GithubAuthorFromJSON,
    GithubAuthorFromJSONTyped,
    GithubAuthorToJSON,
} from './GithubAuthor';

/**
 * 
 * @export
 * @interface GithubCommit
 */
export interface GithubCommit {
    /**
     * 
     * @type {any}
     * @memberof GithubCommit
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubCommit
     */
    url: any | null;
    /**
     * 
     * @type {any}
     * @memberof GithubCommit
     */
    message: any | null;
    /**
     * 
     * @type {GithubAuthor}
     * @memberof GithubCommit
     */
    author: GithubAuthor;
}

/**
 * Check if a given object implements the GithubCommit interface.
 */
export function instanceOfGithubCommit(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "author" in value;

    return isInstance;
}

export function GithubCommitFromJSON(json: any): GithubCommit {
    return GithubCommitFromJSONTyped(json, false);
}

export function GithubCommitFromJSONTyped(json: any, ignoreDiscriminator: boolean): GithubCommit {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'url': json['url'],
        'message': json['message'],
        'author': GithubAuthorFromJSON(json['author']),
    };
}

export function GithubCommitToJSON(value?: GithubCommit | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'url': value.url,
        'message': value.message,
        'author': GithubAuthorToJSON(value.author),
    };
}

