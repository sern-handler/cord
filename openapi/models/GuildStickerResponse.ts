/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GuildStickerResponse
 */
export interface GuildStickerResponse {
    /**
     * 
     * @type {any}
     * @memberof GuildStickerResponse
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildStickerResponse
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildStickerResponse
     */
    tags: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildStickerResponse
     */
    type: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildStickerResponse
     */
    formatType?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildStickerResponse
     */
    description?: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildStickerResponse
     */
    available: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildStickerResponse
     */
    guildId: any | null;
    /**
     * 
     * @type {any}
     * @memberof GuildStickerResponse
     */
    user?: any | null;
}

/**
 * Check if a given object implements the GuildStickerResponse interface.
 */
export function instanceOfGuildStickerResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "available" in value;
    isInstance = isInstance && "guildId" in value;

    return isInstance;
}

export function GuildStickerResponseFromJSON(json: any): GuildStickerResponse {
    return GuildStickerResponseFromJSONTyped(json, false);
}

export function GuildStickerResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GuildStickerResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'tags': json['tags'],
        'type': json['type'],
        'formatType': !exists(json, 'format_type') ? undefined : json['format_type'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'available': json['available'],
        'guildId': json['guild_id'],
        'user': !exists(json, 'user') ? undefined : json['user'],
    };
}

export function GuildStickerResponseToJSON(value?: GuildStickerResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'tags': value.tags,
        'type': value.type,
        'format_type': value.formatType,
        'description': value.description,
        'available': value.available,
        'guild_id': value.guildId,
        'user': value.user,
    };
}

