/* tslint:disable */
/* eslint-disable */
/**
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 *
 * The version of the OpenAPI document: 10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddGuildMemberRequest,
  ApplicationCommandResponse,
  ApplicationFormPartial,
  ApplicationUserRoleConnectionResponse,
  BulkDeleteMessagesRequest,
  ChannelFollowerResponse,
  CommandPermissionsResponse,
  CreateGuildApplicationCommandRequest,
  CreateGuildChannelRequest,
  CreateGuildEmojiRequest,
  CreateGuildFromTemplateRequest,
  CreateGuildTemplateRequest,
  CreatePrivateChannelRequest,
  CreateStageInstanceRequest,
  CreateTextThreadWithMessageRequest,
  CreateWebhookRequest,
  CreatedThreadResponse,
  EmojiResponse,
  FollowChannelRequest,
  GatewayBotResponse,
  GatewayResponse,
  GetMyOAuth2ApplicationResponse,
  GithubWebhook,
  GuildAuditLogResponse,
  GuildBanResponse,
  GuildChannelResponse,
  GuildCreateRequest,
  GuildHomeSettingsResponse,
  GuildIncomingWebhookResponse,
  GuildMFALevelResponse,
  GuildMemberResponse,
  GuildOnboardingResponse,
  GuildPatchRequestPartial,
  GuildPreviewResponse,
  GuildPruneResponse,
  GuildResponse,
  GuildRoleResponse,
  GuildStickerResponse,
  GuildTemplateResponse,
  GuildWelcomeScreenResponse,
  GuildWithCountsResponse,
  IncomingWebhookUpdateRequestPartial,
  MessageCreateRequest,
  MessageEditRequestPartial,
  MessageResponse,
  OAuth2GetAuthorizationResponse,
  PrivateApplicationResponse,
  PrivateGuildMemberResponse,
  SetChannelPermissionOverwriteRequest,
  SetGuildApplicationCommandPermissionsRequest,
  SetGuildMfaLevelRequest,
  SlackWebhook,
  StageInstanceResponse,
  StickerPackCollectionResponse,
  ThreadMemberResponse,
  ThreadResponse,
  ThreadsResponse,
  UpdateApplicationUserRoleConnectionRequest,
  UpdateGuildApplicationCommandRequest,
  UpdateGuildEmojiRequest,
  UpdateGuildMemberRequest,
  UpdateGuildOnboardingRequest,
  UpdateGuildRoleRequest,
  UpdateGuildStickerRequest,
  UpdateGuildTemplateRequest,
  UpdateGuildWidgetSettingsRequest,
  UpdateMyGuildMemberRequest,
  UpdateSelfVoiceStateRequest,
  UpdateStageInstanceRequest,
  UpdateVoiceStateRequest,
  UpdateWebhookByTokenRequest,
  UpdateWebhookRequest,
  UserGuildOnboardingResponse,
  UserPIIResponse,
  UserResponse,
  VanityURLResponse,
  WelcomeScreenPatchRequestPartial,
  WidgetResponse,
  WidgetSettingsResponse,
} from '../models';
import {
    AddGuildMemberRequestFromJSON,
    AddGuildMemberRequestToJSON,
    ApplicationCommandResponseFromJSON,
    ApplicationCommandResponseToJSON,
    ApplicationFormPartialFromJSON,
    ApplicationFormPartialToJSON,
    ApplicationUserRoleConnectionResponseFromJSON,
    ApplicationUserRoleConnectionResponseToJSON,
    BulkDeleteMessagesRequestFromJSON,
    BulkDeleteMessagesRequestToJSON,
    ChannelFollowerResponseFromJSON,
    ChannelFollowerResponseToJSON,
    CommandPermissionsResponseFromJSON,
    CommandPermissionsResponseToJSON,
    CreateGuildApplicationCommandRequestFromJSON,
    CreateGuildApplicationCommandRequestToJSON,
    CreateGuildChannelRequestFromJSON,
    CreateGuildChannelRequestToJSON,
    CreateGuildEmojiRequestFromJSON,
    CreateGuildEmojiRequestToJSON,
    CreateGuildFromTemplateRequestFromJSON,
    CreateGuildFromTemplateRequestToJSON,
    CreateGuildTemplateRequestFromJSON,
    CreateGuildTemplateRequestToJSON,
    CreatePrivateChannelRequestFromJSON,
    CreatePrivateChannelRequestToJSON,
    CreateStageInstanceRequestFromJSON,
    CreateStageInstanceRequestToJSON,
    CreateTextThreadWithMessageRequestFromJSON,
    CreateTextThreadWithMessageRequestToJSON,
    CreateWebhookRequestFromJSON,
    CreateWebhookRequestToJSON,
    CreatedThreadResponseFromJSON,
    CreatedThreadResponseToJSON,
    EmojiResponseFromJSON,
    EmojiResponseToJSON,
    FollowChannelRequestFromJSON,
    FollowChannelRequestToJSON,
    GatewayBotResponseFromJSON,
    GatewayBotResponseToJSON,
    GatewayResponseFromJSON,
    GatewayResponseToJSON,
    GetMyOAuth2ApplicationResponseFromJSON,
    GetMyOAuth2ApplicationResponseToJSON,
    GithubWebhookFromJSON,
    GithubWebhookToJSON,
    GuildAuditLogResponseFromJSON,
    GuildAuditLogResponseToJSON,
    GuildBanResponseFromJSON,
    GuildBanResponseToJSON,
    GuildChannelResponseFromJSON,
    GuildChannelResponseToJSON,
    GuildCreateRequestFromJSON,
    GuildCreateRequestToJSON,
    GuildHomeSettingsResponseFromJSON,
    GuildHomeSettingsResponseToJSON,
    GuildIncomingWebhookResponseFromJSON,
    GuildIncomingWebhookResponseToJSON,
    GuildMFALevelResponseFromJSON,
    GuildMFALevelResponseToJSON,
    GuildMemberResponseFromJSON,
    GuildMemberResponseToJSON,
    GuildOnboardingResponseFromJSON,
    GuildOnboardingResponseToJSON,
    GuildPatchRequestPartialFromJSON,
    GuildPatchRequestPartialToJSON,
    GuildPreviewResponseFromJSON,
    GuildPreviewResponseToJSON,
    GuildPruneResponseFromJSON,
    GuildPruneResponseToJSON,
    GuildResponseFromJSON,
    GuildResponseToJSON,
    GuildRoleResponseFromJSON,
    GuildRoleResponseToJSON,
    GuildStickerResponseFromJSON,
    GuildStickerResponseToJSON,
    GuildTemplateResponseFromJSON,
    GuildTemplateResponseToJSON,
    GuildWelcomeScreenResponseFromJSON,
    GuildWelcomeScreenResponseToJSON,
    GuildWithCountsResponseFromJSON,
    GuildWithCountsResponseToJSON,
    IncomingWebhookUpdateRequestPartialFromJSON,
    IncomingWebhookUpdateRequestPartialToJSON,
    MessageCreateRequestFromJSON,
    MessageCreateRequestToJSON,
    MessageEditRequestPartialFromJSON,
    MessageEditRequestPartialToJSON,
    MessageResponseFromJSON,
    MessageResponseToJSON,
    OAuth2GetAuthorizationResponseFromJSON,
    OAuth2GetAuthorizationResponseToJSON,
    PrivateApplicationResponseFromJSON,
    PrivateApplicationResponseToJSON,
    PrivateGuildMemberResponseFromJSON,
    PrivateGuildMemberResponseToJSON,
    SetChannelPermissionOverwriteRequestFromJSON,
    SetChannelPermissionOverwriteRequestToJSON,
    SetGuildApplicationCommandPermissionsRequestFromJSON,
    SetGuildApplicationCommandPermissionsRequestToJSON,
    SetGuildMfaLevelRequestFromJSON,
    SetGuildMfaLevelRequestToJSON,
    SlackWebhookFromJSON,
    SlackWebhookToJSON,
    StageInstanceResponseFromJSON,
    StageInstanceResponseToJSON,
    StickerPackCollectionResponseFromJSON,
    StickerPackCollectionResponseToJSON,
    ThreadMemberResponseFromJSON,
    ThreadMemberResponseToJSON,
    ThreadResponseFromJSON,
    ThreadResponseToJSON,
    ThreadsResponseFromJSON,
    ThreadsResponseToJSON,
    UpdateApplicationUserRoleConnectionRequestFromJSON,
    UpdateApplicationUserRoleConnectionRequestToJSON,
    UpdateGuildApplicationCommandRequestFromJSON,
    UpdateGuildApplicationCommandRequestToJSON,
    UpdateGuildEmojiRequestFromJSON,
    UpdateGuildEmojiRequestToJSON,
    UpdateGuildMemberRequestFromJSON,
    UpdateGuildMemberRequestToJSON,
    UpdateGuildOnboardingRequestFromJSON,
    UpdateGuildOnboardingRequestToJSON,
    UpdateGuildRoleRequestFromJSON,
    UpdateGuildRoleRequestToJSON,
    UpdateGuildStickerRequestFromJSON,
    UpdateGuildStickerRequestToJSON,
    UpdateGuildTemplateRequestFromJSON,
    UpdateGuildTemplateRequestToJSON,
    UpdateGuildWidgetSettingsRequestFromJSON,
    UpdateGuildWidgetSettingsRequestToJSON,
    UpdateMyGuildMemberRequestFromJSON,
    UpdateMyGuildMemberRequestToJSON,
    UpdateSelfVoiceStateRequestFromJSON,
    UpdateSelfVoiceStateRequestToJSON,
    UpdateStageInstanceRequestFromJSON,
    UpdateStageInstanceRequestToJSON,
    UpdateVoiceStateRequestFromJSON,
    UpdateVoiceStateRequestToJSON,
    UpdateWebhookByTokenRequestFromJSON,
    UpdateWebhookByTokenRequestToJSON,
    UpdateWebhookRequestFromJSON,
    UpdateWebhookRequestToJSON,
    UserGuildOnboardingResponseFromJSON,
    UserGuildOnboardingResponseToJSON,
    UserPIIResponseFromJSON,
    UserPIIResponseToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
    VanityURLResponseFromJSON,
    VanityURLResponseToJSON,
    WelcomeScreenPatchRequestPartialFromJSON,
    WelcomeScreenPatchRequestPartialToJSON,
    WidgetResponseFromJSON,
    WidgetResponseToJSON,
    WidgetSettingsResponseFromJSON,
    WidgetSettingsResponseToJSON,
} from '../models';

export interface AddGroupDmUserRequest {
    channelId: any;
    userId: any;
}

export interface AddGuildMemberOperationRequest {
    guildId: any;
    userId: any;
    addGuildMemberRequest: AddGuildMemberRequest;
}

export interface AddGuildMemberRoleRequest {
    guildId: any;
    userId: any;
    roleId: any;
}

export interface AddMyMessageReactionRequest {
    channelId: any;
    messageId: any;
    emojiName: any;
}

export interface AddThreadMemberRequest {
    channelId: any;
    userId: any;
}

export interface BanUserFromGuildRequest {
    guildId: any;
    userId: any;
}

export interface BulkDeleteMessagesOperationRequest {
    channelId: any;
    bulkDeleteMessagesRequest: BulkDeleteMessagesRequest;
}

export interface BulkSetApplicationCommandsRequest {
    applicationId: any;
    body: any | null;
}

export interface BulkSetGuildApplicationCommandsRequest {
    applicationId: any;
    guildId: any;
    body: any | null;
}

export interface BulkUpdateGuildChannelsRequest {
    guildId: any;
    body: any | null;
}

export interface BulkUpdateGuildRolesRequest {
    guildId: any;
    body: any | null;
}

export interface CreateApplicationCommandRequest {
    applicationId: any;
    createGuildApplicationCommandRequest: CreateGuildApplicationCommandRequest;
}

export interface CreateAutoModerationRuleRequest {
    guildId: any;
    body: any | null;
}

export interface CreateChannelInviteRequest {
    channelId: any;
    body: any | null;
}

export interface CreateDmRequest {
    createPrivateChannelRequest: CreatePrivateChannelRequest;
}

export interface CreateGuildRequest {
    guildCreateRequest: GuildCreateRequest;
}

export interface CreateGuildApplicationCommandOperationRequest {
    applicationId: any;
    guildId: any;
    createGuildApplicationCommandRequest: CreateGuildApplicationCommandRequest;
}

export interface CreateGuildChannelOperationRequest {
    guildId: any;
    createGuildChannelRequest: CreateGuildChannelRequest;
}

export interface CreateGuildEmojiOperationRequest {
    guildId: any;
    createGuildEmojiRequest: CreateGuildEmojiRequest;
}

export interface CreateGuildFromTemplateOperationRequest {
    code: any;
    createGuildFromTemplateRequest: CreateGuildFromTemplateRequest;
}

export interface CreateGuildRoleRequest {
    guildId: any;
}

export interface CreateGuildScheduledEventRequest {
    guildId: any;
    body: any | null;
}

export interface CreateGuildStickerRequest {
    guildId: any;
    name: any | null;
    tags: any | null;
    file: any | null;
    description?: any | null;
}

export interface CreateGuildTemplateOperationRequest {
    guildId: any;
    createGuildTemplateRequest: CreateGuildTemplateRequest;
}

export interface CreateInteractionResponseRequest {
    interactionId: any;
    interactionToken: any;
    body: any | null;
}

export interface CreateMessageRequest {
    channelId: any;
    messageCreateRequest: MessageCreateRequest;
}

export interface CreateStageInstanceOperationRequest {
    createStageInstanceRequest: CreateStageInstanceRequest;
}

export interface CreateThreadRequest {
    channelId: any;
    body: any | null;
}

export interface CreateThreadFromMessageRequest {
    channelId: any;
    messageId: any;
    createTextThreadWithMessageRequest: CreateTextThreadWithMessageRequest;
}

export interface CreateWebhookOperationRequest {
    channelId: any;
    createWebhookRequest: CreateWebhookRequest;
}

export interface CrosspostMessageRequest {
    channelId: any;
    messageId: any;
}

export interface DeleteAllMessageReactionsRequest {
    channelId: any;
    messageId: any;
}

export interface DeleteAllMessageReactionsByEmojiRequest {
    channelId: any;
    messageId: any;
    emojiName: any;
}

export interface DeleteApplicationCommandRequest {
    applicationId: any;
    commandId: any;
}

export interface DeleteAutoModerationRuleRequest {
    guildId: any;
    ruleId: any;
}

export interface DeleteChannelRequest {
    channelId: any;
}

export interface DeleteChannelPermissionOverwriteRequest {
    channelId: any;
    overwriteId: any;
}

export interface DeleteGroupDmUserRequest {
    channelId: any;
    userId: any;
}

export interface DeleteGuildRequest {
    guildId: any;
}

export interface DeleteGuildApplicationCommandRequest {
    applicationId: any;
    guildId: any;
    commandId: any;
}

export interface DeleteGuildEmojiRequest {
    guildId: any;
    emojiId: any;
}

export interface DeleteGuildIntegrationRequest {
    guildId: any;
    integrationId: any;
}

export interface DeleteGuildMemberRequest {
    guildId: any;
    userId: any;
}

export interface DeleteGuildMemberRoleRequest {
    guildId: any;
    userId: any;
    roleId: any;
}

export interface DeleteGuildRoleRequest {
    guildId: any;
    roleId: any;
}

export interface DeleteGuildScheduledEventRequest {
    guildId: any;
    guildScheduledEventId: any;
}

export interface DeleteGuildStickerRequest {
    guildId: any;
    stickerId: any;
}

export interface DeleteGuildTemplateRequest {
    guildId: any;
    code: any;
}

export interface DeleteMessageRequest {
    channelId: any;
    messageId: any;
}

export interface DeleteMyMessageReactionRequest {
    channelId: any;
    messageId: any;
    emojiName: any;
}

export interface DeleteOriginalWebhookMessageRequest {
    webhookId: any;
    webhookToken: any;
    threadId?: any;
}

export interface DeleteStageInstanceRequest {
    channelId: any;
    body: any | null;
}

export interface DeleteThreadMemberRequest {
    channelId: any;
    userId: any;
}

export interface DeleteUserMessageReactionRequest {
    channelId: any;
    messageId: any;
    emojiName: any;
    userId: any;
}

export interface DeleteWebhookRequest {
    webhookId: any;
}

export interface DeleteWebhookByTokenRequest {
    webhookId: any;
    webhookToken: any;
}

export interface DeleteWebhookMessageRequest {
    webhookId: any;
    webhookToken: any;
    messageId: any;
    threadId?: any;
}

export interface ExecuteGithubCompatibleWebhookRequest {
    webhookId: any;
    webhookToken: any;
    githubWebhook: GithubWebhook;
    wait?: any;
    threadId?: any;
}

export interface ExecuteSlackCompatibleWebhookRequest {
    webhookId: any;
    webhookToken: any;
    slackWebhook: SlackWebhook;
    wait?: any;
    threadId?: any;
}

export interface ExecuteWebhookRequest {
    webhookId: any;
    webhookToken: any;
    body: any | null;
    wait?: any;
    threadId?: any;
}

export interface FollowChannelOperationRequest {
    channelId: any;
    followChannelRequest: FollowChannelRequest;
}

export interface GetActiveGuildThreadsRequest {
    guildId: any;
}

export interface GetApplicationRequest {
    applicationId: any;
}

export interface GetApplicationCommandRequest {
    applicationId: any;
    commandId: any;
}

export interface GetApplicationRoleConnectionsMetadataRequest {
    applicationId: any;
}

export interface GetApplicationUserRoleConnectionRequest {
    applicationId: any;
}

export interface GetAutoModerationRuleRequest {
    guildId: any;
    ruleId: any;
}

export interface GetChannelRequest {
    channelId: any;
}

export interface GetGuildRequest {
    guildId: any;
    withCounts?: any;
}

export interface GetGuildApplicationCommandRequest {
    applicationId: any;
    guildId: any;
    commandId: any;
}

export interface GetGuildApplicationCommandPermissionsRequest {
    applicationId: any;
    guildId: any;
    commandId: any;
}

export interface GetGuildBanRequest {
    guildId: any;
    userId: any;
}

export interface GetGuildEmojiRequest {
    guildId: any;
    emojiId: any;
}

export interface GetGuildMemberRequest {
    guildId: any;
    userId: any;
}

export interface GetGuildNewMemberWelcomeRequest {
    guildId: any;
}

export interface GetGuildPreviewRequest {
    guildId: any;
}

export interface GetGuildScheduledEventRequest {
    guildId: any;
    guildScheduledEventId: any;
    withUserCount?: any;
}

export interface GetGuildStickerRequest {
    guildId: any;
    stickerId: any;
}

export interface GetGuildTemplateRequest {
    code: any;
}

export interface GetGuildVanityUrlRequest {
    guildId: any;
}

export interface GetGuildWebhooksRequest {
    guildId: any;
}

export interface GetGuildWelcomeScreenRequest {
    guildId: any;
}

export interface GetGuildWidgetRequest {
    guildId: any;
}

export interface GetGuildWidgetPngRequest {
    guildId: any;
    style?: any;
}

export interface GetGuildWidgetSettingsRequest {
    guildId: any;
}

export interface GetGuildsOnboardingRequest {
    guildId: any;
}

export interface GetMessageRequest {
    channelId: any;
    messageId: any;
}

export interface GetMyGuildMemberRequest {
    guildId: any;
}

export interface GetOriginalWebhookMessageRequest {
    webhookId: any;
    webhookToken: any;
    threadId?: any;
}

export interface GetStageInstanceRequest {
    channelId: any;
}

export interface GetStickerRequest {
    stickerId: any;
}

export interface GetThreadMemberRequest {
    channelId: any;
    userId: any;
    withMember?: any;
}

export interface GetUserRequest {
    userId: any;
}

export interface GetWebhookRequest {
    webhookId: any;
}

export interface GetWebhookByTokenRequest {
    webhookId: any;
    webhookToken: any;
}

export interface GetWebhookMessageRequest {
    webhookId: any;
    webhookToken: any;
    messageId: any;
    threadId?: any;
}

export interface InviteResolveRequest {
    code: any;
    withCounts?: any;
    guildScheduledEventId?: any;
}

export interface InviteRevokeRequest {
    code: any;
}

export interface JoinThreadRequest {
    channelId: any;
}

export interface LeaveGuildRequest {
    guildId: any;
    body: any | null;
}

export interface LeaveThreadRequest {
    channelId: any;
}

export interface ListApplicationCommandsRequest {
    applicationId: any;
    withLocalizations?: any;
}

export interface ListAutoModerationRulesRequest {
    guildId: any;
}

export interface ListChannelInvitesRequest {
    channelId: any;
}

export interface ListChannelWebhooksRequest {
    channelId: any;
}

export interface ListGuildApplicationCommandPermissionsRequest {
    applicationId: any;
    guildId: any;
}

export interface ListGuildApplicationCommandsRequest {
    applicationId: any;
    guildId: any;
    withLocalizations?: any;
}

export interface ListGuildAuditLogEntriesRequest {
    guildId: any;
    userId?: any;
    actionType?: any;
    before?: any;
    after?: any;
    limit?: any;
}

export interface ListGuildBansRequest {
    guildId: any;
    limit?: any;
    before?: any;
    after?: any;
}

export interface ListGuildChannelsRequest {
    guildId: any;
}

export interface ListGuildEmojisRequest {
    guildId: any;
}

export interface ListGuildIntegrationsRequest {
    guildId: any;
}

export interface ListGuildInvitesRequest {
    guildId: any;
}

export interface ListGuildMembersRequest {
    guildId: any;
    limit?: any;
    after?: any;
}

export interface ListGuildRolesRequest {
    guildId: any;
}

export interface ListGuildScheduledEventUsersRequest {
    guildId: any;
    guildScheduledEventId: any;
    withMember?: any;
    limit?: any;
    before?: any;
    after?: any;
}

export interface ListGuildScheduledEventsRequest {
    guildId: any;
    withUserCount?: any;
}

export interface ListGuildStickersRequest {
    guildId: any;
}

export interface ListGuildTemplatesRequest {
    guildId: any;
}

export interface ListGuildVoiceRegionsRequest {
    guildId: any;
}

export interface ListMessageReactionsByEmojiRequest {
    channelId: any;
    messageId: any;
    emojiName: any;
    after?: any;
    limit?: any;
}

export interface ListMessagesRequest {
    channelId: any;
    around?: any;
    before?: any;
    after?: any;
    limit?: any;
}

export interface ListMyGuildsRequest {
    before?: any;
    after?: any;
    limit?: any;
    withCounts?: any;
}

export interface ListMyPrivateArchivedThreadsRequest {
    channelId: any;
    before?: any;
    limit?: any;
}

export interface ListPinnedMessagesRequest {
    channelId: any;
}

export interface ListPrivateArchivedThreadsRequest {
    channelId: any;
    before?: any;
    limit?: any;
}

export interface ListPublicArchivedThreadsRequest {
    channelId: any;
    before?: any;
    limit?: any;
}

export interface ListThreadMembersRequest {
    channelId: any;
    withMember?: any;
    limit?: any;
    after?: any;
}

export interface PinMessageRequest {
    channelId: any;
    messageId: any;
}

export interface PreviewPruneGuildRequest {
    guildId: any;
}

export interface PruneGuildRequest {
    guildId: any;
}

export interface PutGuildsOnboardingRequest {
    guildId: any;
    updateGuildOnboardingRequest: UpdateGuildOnboardingRequest;
}

export interface SearchGuildMembersRequest {
    limit: any;
    query: any;
    guildId: any;
}

export interface SetChannelPermissionOverwriteOperationRequest {
    channelId: any;
    overwriteId: any;
    setChannelPermissionOverwriteRequest: SetChannelPermissionOverwriteRequest;
}

export interface SetGuildApplicationCommandPermissionsOperationRequest {
    applicationId: any;
    guildId: any;
    commandId: any;
    setGuildApplicationCommandPermissionsRequest: SetGuildApplicationCommandPermissionsRequest;
}

export interface SetGuildMfaLevelOperationRequest {
    guildId: any;
    setGuildMfaLevelRequest: SetGuildMfaLevelRequest;
}

export interface SyncGuildTemplateRequest {
    guildId: any;
    code: any;
}

export interface TriggerTypingIndicatorRequest {
    channelId: any;
}

export interface UnbanUserFromGuildRequest {
    guildId: any;
    userId: any;
}

export interface UnpinMessageRequest {
    channelId: any;
    messageId: any;
}

export interface UpdateApplicationRequest {
    applicationId: any;
    applicationFormPartial: ApplicationFormPartial;
}

export interface UpdateApplicationCommandRequest {
    applicationId: any;
    commandId: any;
    updateGuildApplicationCommandRequest: UpdateGuildApplicationCommandRequest;
}

export interface UpdateApplicationRoleConnectionsMetadataRequest {
    applicationId: any;
    body: any | null;
}

export interface UpdateApplicationUserRoleConnectionOperationRequest {
    applicationId: any;
    updateApplicationUserRoleConnectionRequest: UpdateApplicationUserRoleConnectionRequest;
}

export interface UpdateAutoModerationRuleRequest {
    guildId: any;
    ruleId: any;
    body: any | null;
}

export interface UpdateChannelRequest {
    channelId: any;
    body: any | null;
}

export interface UpdateGuildRequest {
    guildId: any;
    guildPatchRequestPartial: GuildPatchRequestPartial;
}

export interface UpdateGuildApplicationCommandOperationRequest {
    applicationId: any;
    guildId: any;
    commandId: any;
    updateGuildApplicationCommandRequest: UpdateGuildApplicationCommandRequest;
}

export interface UpdateGuildEmojiOperationRequest {
    guildId: any;
    emojiId: any;
    updateGuildEmojiRequest: UpdateGuildEmojiRequest;
}

export interface UpdateGuildMemberOperationRequest {
    guildId: any;
    userId: any;
    updateGuildMemberRequest: UpdateGuildMemberRequest;
}

export interface UpdateGuildRoleOperationRequest {
    guildId: any;
    roleId: any;
    updateGuildRoleRequest: UpdateGuildRoleRequest;
}

export interface UpdateGuildScheduledEventRequest {
    guildId: any;
    guildScheduledEventId: any;
    body: any | null;
}

export interface UpdateGuildStickerOperationRequest {
    guildId: any;
    stickerId: any;
    updateGuildStickerRequest: UpdateGuildStickerRequest;
}

export interface UpdateGuildTemplateOperationRequest {
    guildId: any;
    code: any;
    updateGuildTemplateRequest: UpdateGuildTemplateRequest;
}

export interface UpdateGuildWelcomeScreenRequest {
    guildId: any;
    welcomeScreenPatchRequestPartial: WelcomeScreenPatchRequestPartial;
}

export interface UpdateGuildWidgetSettingsOperationRequest {
    guildId: any;
    updateGuildWidgetSettingsRequest: UpdateGuildWidgetSettingsRequest;
}

export interface UpdateMessageRequest {
    channelId: any;
    messageId: any;
    messageEditRequestPartial: MessageEditRequestPartial;
}

export interface UpdateMyApplicationRequest {
    applicationFormPartial: ApplicationFormPartial;
}

export interface UpdateMyGuildMemberOperationRequest {
    guildId: any;
    updateMyGuildMemberRequest: UpdateMyGuildMemberRequest;
}

export interface UpdateOriginalWebhookMessageRequest {
    webhookId: any;
    webhookToken: any;
    incomingWebhookUpdateRequestPartial: IncomingWebhookUpdateRequestPartial;
    threadId?: any;
}

export interface UpdateSelfVoiceStateOperationRequest {
    guildId: any;
    updateSelfVoiceStateRequest: UpdateSelfVoiceStateRequest;
}

export interface UpdateStageInstanceOperationRequest {
    channelId: any;
    updateStageInstanceRequest: UpdateStageInstanceRequest;
}

export interface UpdateVoiceStateOperationRequest {
    guildId: any;
    userId: any;
    updateVoiceStateRequest: UpdateVoiceStateRequest;
}

export interface UpdateWebhookOperationRequest {
    webhookId: any;
    updateWebhookRequest: UpdateWebhookRequest;
}

export interface UpdateWebhookByTokenOperationRequest {
    webhookId: any;
    webhookToken: any;
    updateWebhookByTokenRequest: UpdateWebhookByTokenRequest;
}

export interface UpdateWebhookMessageRequest {
    webhookId: any;
    webhookToken: any;
    messageId: any;
    incomingWebhookUpdateRequestPartial: IncomingWebhookUpdateRequestPartial;
    threadId?: any;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async addGroupDmUserRaw(requestParameters: AddGroupDmUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling addGroupDmUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addGroupDmUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/recipients/{user_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async addGroupDmUser(requestParameters: AddGroupDmUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.addGroupDmUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addGuildMemberRaw(requestParameters: AddGuildMemberOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildMemberResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling addGuildMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addGuildMember.');
        }

        if (requestParameters.addGuildMemberRequest === null || requestParameters.addGuildMemberRequest === undefined) {
            throw new runtime.RequiredError('addGuildMemberRequest','Required parameter requestParameters.addGuildMemberRequest was null or undefined when calling addGuildMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/members/{user_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddGuildMemberRequestToJSON(requestParameters.addGuildMemberRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildMemberResponseFromJSON(jsonValue));
    }

    /**
     */
    async addGuildMember(requestParameters: AddGuildMemberOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildMemberResponse> {
        const response = await this.addGuildMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addGuildMemberRoleRaw(requestParameters: AddGuildMemberRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling addGuildMemberRole.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addGuildMemberRole.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling addGuildMemberRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/members/{user_id}/roles/{role_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addGuildMemberRole(requestParameters: AddGuildMemberRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addGuildMemberRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async addMyMessageReactionRaw(requestParameters: AddMyMessageReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling addMyMessageReaction.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling addMyMessageReaction.');
        }

        if (requestParameters.emojiName === null || requestParameters.emojiName === undefined) {
            throw new runtime.RequiredError('emojiName','Required parameter requestParameters.emojiName was null or undefined when calling addMyMessageReaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}/@me`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))).replace(`{${"emoji_name"}}`, encodeURIComponent(String(requestParameters.emojiName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addMyMessageReaction(requestParameters: AddMyMessageReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addMyMessageReactionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async addThreadMemberRaw(requestParameters: AddThreadMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling addThreadMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addThreadMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/thread-members/{user_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addThreadMember(requestParameters: AddThreadMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addThreadMemberRaw(requestParameters, initOverrides);
    }

    /**
     */
    async banUserFromGuildRaw(requestParameters: BanUserFromGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling banUserFromGuild.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling banUserFromGuild.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/bans/{user_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async banUserFromGuild(requestParameters: BanUserFromGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.banUserFromGuildRaw(requestParameters, initOverrides);
    }

    /**
     */
    async bulkDeleteMessagesRaw(requestParameters: BulkDeleteMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling bulkDeleteMessages.');
        }

        if (requestParameters.bulkDeleteMessagesRequest === null || requestParameters.bulkDeleteMessagesRequest === undefined) {
            throw new runtime.RequiredError('bulkDeleteMessagesRequest','Required parameter requestParameters.bulkDeleteMessagesRequest was null or undefined when calling bulkDeleteMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages/bulk-delete`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkDeleteMessagesRequestToJSON(requestParameters.bulkDeleteMessagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bulkDeleteMessages(requestParameters: BulkDeleteMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkDeleteMessagesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async bulkSetApplicationCommandsRaw(requestParameters: BulkSetApplicationCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling bulkSetApplicationCommands.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling bulkSetApplicationCommands.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["applications.commands.update"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/commands`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async bulkSetApplicationCommands(requestParameters: BulkSetApplicationCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.bulkSetApplicationCommandsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async bulkSetGuildApplicationCommandsRaw(requestParameters: BulkSetGuildApplicationCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling bulkSetGuildApplicationCommands.');
        }

        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling bulkSetGuildApplicationCommands.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling bulkSetGuildApplicationCommands.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["applications.commands.update"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/guilds/{guild_id}/commands`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async bulkSetGuildApplicationCommands(requestParameters: BulkSetGuildApplicationCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.bulkSetGuildApplicationCommandsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async bulkUpdateGuildChannelsRaw(requestParameters: BulkUpdateGuildChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling bulkUpdateGuildChannels.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling bulkUpdateGuildChannels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/channels`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bulkUpdateGuildChannels(requestParameters: BulkUpdateGuildChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkUpdateGuildChannelsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async bulkUpdateGuildRolesRaw(requestParameters: BulkUpdateGuildRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling bulkUpdateGuildRoles.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling bulkUpdateGuildRoles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/roles`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async bulkUpdateGuildRoles(requestParameters: BulkUpdateGuildRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.bulkUpdateGuildRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createApplicationCommandRaw(requestParameters: CreateApplicationCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationCommandResponse>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling createApplicationCommand.');
        }

        if (requestParameters.createGuildApplicationCommandRequest === null || requestParameters.createGuildApplicationCommandRequest === undefined) {
            throw new runtime.RequiredError('createGuildApplicationCommandRequest','Required parameter requestParameters.createGuildApplicationCommandRequest was null or undefined when calling createApplicationCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["applications.commands.update"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/commands`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGuildApplicationCommandRequestToJSON(requestParameters.createGuildApplicationCommandRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationCommandResponseFromJSON(jsonValue));
    }

    /**
     */
    async createApplicationCommand(requestParameters: CreateApplicationCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationCommandResponse> {
        const response = await this.createApplicationCommandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createAutoModerationRuleRaw(requestParameters: CreateAutoModerationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling createAutoModerationRule.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAutoModerationRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/auto-moderation/rules`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createAutoModerationRule(requestParameters: CreateAutoModerationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createAutoModerationRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createChannelInviteRaw(requestParameters: CreateChannelInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling createChannelInvite.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createChannelInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/invites`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createChannelInvite(requestParameters: CreateChannelInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createChannelInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createDmRaw(requestParameters: CreateDmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.createPrivateChannelRequest === null || requestParameters.createPrivateChannelRequest === undefined) {
            throw new runtime.RequiredError('createPrivateChannelRequest','Required parameter requestParameters.createPrivateChannelRequest was null or undefined when calling createDm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/users/@me/channels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePrivateChannelRequestToJSON(requestParameters.createPrivateChannelRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createDm(requestParameters: CreateDmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createDmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createGuildRaw(requestParameters: CreateGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildResponse>> {
        if (requestParameters.guildCreateRequest === null || requestParameters.guildCreateRequest === undefined) {
            throw new runtime.RequiredError('guildCreateRequest','Required parameter requestParameters.guildCreateRequest was null or undefined when calling createGuild.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuildCreateRequestToJSON(requestParameters.guildCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildResponseFromJSON(jsonValue));
    }

    /**
     */
    async createGuild(requestParameters: CreateGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildResponse> {
        const response = await this.createGuildRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createGuildApplicationCommandRaw(requestParameters: CreateGuildApplicationCommandOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationCommandResponse>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling createGuildApplicationCommand.');
        }

        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling createGuildApplicationCommand.');
        }

        if (requestParameters.createGuildApplicationCommandRequest === null || requestParameters.createGuildApplicationCommandRequest === undefined) {
            throw new runtime.RequiredError('createGuildApplicationCommandRequest','Required parameter requestParameters.createGuildApplicationCommandRequest was null or undefined when calling createGuildApplicationCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["applications.commands.update"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/guilds/{guild_id}/commands`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGuildApplicationCommandRequestToJSON(requestParameters.createGuildApplicationCommandRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationCommandResponseFromJSON(jsonValue));
    }

    /**
     */
    async createGuildApplicationCommand(requestParameters: CreateGuildApplicationCommandOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationCommandResponse> {
        const response = await this.createGuildApplicationCommandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createGuildChannelRaw(requestParameters: CreateGuildChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildChannelResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling createGuildChannel.');
        }

        if (requestParameters.createGuildChannelRequest === null || requestParameters.createGuildChannelRequest === undefined) {
            throw new runtime.RequiredError('createGuildChannelRequest','Required parameter requestParameters.createGuildChannelRequest was null or undefined when calling createGuildChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/channels`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGuildChannelRequestToJSON(requestParameters.createGuildChannelRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildChannelResponseFromJSON(jsonValue));
    }

    /**
     */
    async createGuildChannel(requestParameters: CreateGuildChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildChannelResponse> {
        const response = await this.createGuildChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createGuildEmojiRaw(requestParameters: CreateGuildEmojiOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmojiResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling createGuildEmoji.');
        }

        if (requestParameters.createGuildEmojiRequest === null || requestParameters.createGuildEmojiRequest === undefined) {
            throw new runtime.RequiredError('createGuildEmojiRequest','Required parameter requestParameters.createGuildEmojiRequest was null or undefined when calling createGuildEmoji.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/emojis`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGuildEmojiRequestToJSON(requestParameters.createGuildEmojiRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmojiResponseFromJSON(jsonValue));
    }

    /**
     */
    async createGuildEmoji(requestParameters: CreateGuildEmojiOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmojiResponse> {
        const response = await this.createGuildEmojiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createGuildFromTemplateRaw(requestParameters: CreateGuildFromTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildResponse>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling createGuildFromTemplate.');
        }

        if (requestParameters.createGuildFromTemplateRequest === null || requestParameters.createGuildFromTemplateRequest === undefined) {
            throw new runtime.RequiredError('createGuildFromTemplateRequest','Required parameter requestParameters.createGuildFromTemplateRequest was null or undefined when calling createGuildFromTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/templates/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGuildFromTemplateRequestToJSON(requestParameters.createGuildFromTemplateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildResponseFromJSON(jsonValue));
    }

    /**
     */
    async createGuildFromTemplate(requestParameters: CreateGuildFromTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildResponse> {
        const response = await this.createGuildFromTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createGuildRoleRaw(requestParameters: CreateGuildRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildRoleResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling createGuildRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/roles`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async createGuildRole(requestParameters: CreateGuildRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildRoleResponse> {
        const response = await this.createGuildRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createGuildScheduledEventRaw(requestParameters: CreateGuildScheduledEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling createGuildScheduledEvent.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createGuildScheduledEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/scheduled-events`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createGuildScheduledEvent(requestParameters: CreateGuildScheduledEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createGuildScheduledEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createGuildStickerRaw(requestParameters: CreateGuildStickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildStickerResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling createGuildSticker.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createGuildSticker.');
        }

        if (requestParameters.tags === null || requestParameters.tags === undefined) {
            throw new runtime.RequiredError('tags','Required parameter requestParameters.tags was null or undefined when calling createGuildSticker.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling createGuildSticker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', new Blob([JSON.stringify(anyToJSON(requestParameters.name))], { type: "application/json", }));
                    }

        if (requestParameters.tags !== undefined) {
            formParams.append('tags', new Blob([JSON.stringify(anyToJSON(requestParameters.tags))], { type: "application/json", }));
                    }

        if (requestParameters.description !== undefined) {
            formParams.append('description', new Blob([JSON.stringify(anyToJSON(requestParameters.description))], { type: "application/json", }));
                    }

        if (requestParameters.file !== undefined) {
            formParams.append('file', new Blob([JSON.stringify(anyToJSON(requestParameters.file))], { type: "application/json", }));
                    }

        const response = await this.request({
            path: `/guilds/{guild_id}/stickers`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildStickerResponseFromJSON(jsonValue));
    }

    /**
     */
    async createGuildSticker(requestParameters: CreateGuildStickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildStickerResponse> {
        const response = await this.createGuildStickerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createGuildTemplateRaw(requestParameters: CreateGuildTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildTemplateResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling createGuildTemplate.');
        }

        if (requestParameters.createGuildTemplateRequest === null || requestParameters.createGuildTemplateRequest === undefined) {
            throw new runtime.RequiredError('createGuildTemplateRequest','Required parameter requestParameters.createGuildTemplateRequest was null or undefined when calling createGuildTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/templates`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGuildTemplateRequestToJSON(requestParameters.createGuildTemplateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildTemplateResponseFromJSON(jsonValue));
    }

    /**
     */
    async createGuildTemplate(requestParameters: CreateGuildTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildTemplateResponse> {
        const response = await this.createGuildTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createInteractionResponseRaw(requestParameters: CreateInteractionResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.interactionId === null || requestParameters.interactionId === undefined) {
            throw new runtime.RequiredError('interactionId','Required parameter requestParameters.interactionId was null or undefined when calling createInteractionResponse.');
        }

        if (requestParameters.interactionToken === null || requestParameters.interactionToken === undefined) {
            throw new runtime.RequiredError('interactionToken','Required parameter requestParameters.interactionToken was null or undefined when calling createInteractionResponse.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createInteractionResponse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/interactions/{interaction_id}/{interaction_token}/callback`.replace(`{${"interaction_id"}}`, encodeURIComponent(String(requestParameters.interactionId))).replace(`{${"interaction_token"}}`, encodeURIComponent(String(requestParameters.interactionToken))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createInteractionResponse(requestParameters: CreateInteractionResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createInteractionResponseRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createMessageRaw(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling createMessage.');
        }

        if (requestParameters.messageCreateRequest === null || requestParameters.messageCreateRequest === undefined) {
            throw new runtime.RequiredError('messageCreateRequest','Required parameter requestParameters.messageCreateRequest was null or undefined when calling createMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageCreateRequestToJSON(requestParameters.messageCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     */
    async createMessage(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.createMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createStageInstanceRaw(requestParameters: CreateStageInstanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageInstanceResponse>> {
        if (requestParameters.createStageInstanceRequest === null || requestParameters.createStageInstanceRequest === undefined) {
            throw new runtime.RequiredError('createStageInstanceRequest','Required parameter requestParameters.createStageInstanceRequest was null or undefined when calling createStageInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/stage-instances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStageInstanceRequestToJSON(requestParameters.createStageInstanceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageInstanceResponseFromJSON(jsonValue));
    }

    /**
     */
    async createStageInstance(requestParameters: CreateStageInstanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageInstanceResponse> {
        const response = await this.createStageInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createThreadRaw(requestParameters: CreateThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatedThreadResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling createThread.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/threads`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatedThreadResponseFromJSON(jsonValue));
    }

    /**
     */
    async createThread(requestParameters: CreateThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatedThreadResponse> {
        const response = await this.createThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createThreadFromMessageRaw(requestParameters: CreateThreadFromMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThreadResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling createThreadFromMessage.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling createThreadFromMessage.');
        }

        if (requestParameters.createTextThreadWithMessageRequest === null || requestParameters.createTextThreadWithMessageRequest === undefined) {
            throw new runtime.RequiredError('createTextThreadWithMessageRequest','Required parameter requestParameters.createTextThreadWithMessageRequest was null or undefined when calling createThreadFromMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages/{message_id}/threads`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTextThreadWithMessageRequestToJSON(requestParameters.createTextThreadWithMessageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadResponseFromJSON(jsonValue));
    }

    /**
     */
    async createThreadFromMessage(requestParameters: CreateThreadFromMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThreadResponse> {
        const response = await this.createThreadFromMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createWebhookRaw(requestParameters: CreateWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildIncomingWebhookResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling createWebhook.');
        }

        if (requestParameters.createWebhookRequest === null || requestParameters.createWebhookRequest === undefined) {
            throw new runtime.RequiredError('createWebhookRequest','Required parameter requestParameters.createWebhookRequest was null or undefined when calling createWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/webhooks`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWebhookRequestToJSON(requestParameters.createWebhookRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildIncomingWebhookResponseFromJSON(jsonValue));
    }

    /**
     */
    async createWebhook(requestParameters: CreateWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildIncomingWebhookResponse> {
        const response = await this.createWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async crosspostMessageRaw(requestParameters: CrosspostMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling crosspostMessage.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling crosspostMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages/{message_id}/crosspost`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     */
    async crosspostMessage(requestParameters: CrosspostMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.crosspostMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteAllMessageReactionsRaw(requestParameters: DeleteAllMessageReactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling deleteAllMessageReactions.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling deleteAllMessageReactions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages/{message_id}/reactions`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteAllMessageReactions(requestParameters: DeleteAllMessageReactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAllMessageReactionsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteAllMessageReactionsByEmojiRaw(requestParameters: DeleteAllMessageReactionsByEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling deleteAllMessageReactionsByEmoji.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling deleteAllMessageReactionsByEmoji.');
        }

        if (requestParameters.emojiName === null || requestParameters.emojiName === undefined) {
            throw new runtime.RequiredError('emojiName','Required parameter requestParameters.emojiName was null or undefined when calling deleteAllMessageReactionsByEmoji.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))).replace(`{${"emoji_name"}}`, encodeURIComponent(String(requestParameters.emojiName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteAllMessageReactionsByEmoji(requestParameters: DeleteAllMessageReactionsByEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAllMessageReactionsByEmojiRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteApplicationCommandRaw(requestParameters: DeleteApplicationCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling deleteApplicationCommand.');
        }

        if (requestParameters.commandId === null || requestParameters.commandId === undefined) {
            throw new runtime.RequiredError('commandId','Required parameter requestParameters.commandId was null or undefined when calling deleteApplicationCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["applications.commands.update"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/commands/{command_id}`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"command_id"}}`, encodeURIComponent(String(requestParameters.commandId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteApplicationCommand(requestParameters: DeleteApplicationCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApplicationCommandRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteAutoModerationRuleRaw(requestParameters: DeleteAutoModerationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling deleteAutoModerationRule.');
        }

        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling deleteAutoModerationRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/auto-moderation/rules/{rule_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"rule_id"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteAutoModerationRule(requestParameters: DeleteAutoModerationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAutoModerationRuleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteChannelRaw(requestParameters: DeleteChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling deleteChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async deleteChannel(requestParameters: DeleteChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteChannelPermissionOverwriteRaw(requestParameters: DeleteChannelPermissionOverwriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling deleteChannelPermissionOverwrite.');
        }

        if (requestParameters.overwriteId === null || requestParameters.overwriteId === undefined) {
            throw new runtime.RequiredError('overwriteId','Required parameter requestParameters.overwriteId was null or undefined when calling deleteChannelPermissionOverwrite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/permissions/{overwrite_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"overwrite_id"}}`, encodeURIComponent(String(requestParameters.overwriteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteChannelPermissionOverwrite(requestParameters: DeleteChannelPermissionOverwriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteChannelPermissionOverwriteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGroupDmUserRaw(requestParameters: DeleteGroupDmUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling deleteGroupDmUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteGroupDmUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/recipients/{user_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteGroupDmUser(requestParameters: DeleteGroupDmUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGroupDmUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGuildRaw(requestParameters: DeleteGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling deleteGuild.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteGuild(requestParameters: DeleteGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGuildRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGuildApplicationCommandRaw(requestParameters: DeleteGuildApplicationCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling deleteGuildApplicationCommand.');
        }

        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling deleteGuildApplicationCommand.');
        }

        if (requestParameters.commandId === null || requestParameters.commandId === undefined) {
            throw new runtime.RequiredError('commandId','Required parameter requestParameters.commandId was null or undefined when calling deleteGuildApplicationCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["applications.commands.update"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/guilds/{guild_id}/commands/{command_id}`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"command_id"}}`, encodeURIComponent(String(requestParameters.commandId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteGuildApplicationCommand(requestParameters: DeleteGuildApplicationCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGuildApplicationCommandRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGuildEmojiRaw(requestParameters: DeleteGuildEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling deleteGuildEmoji.');
        }

        if (requestParameters.emojiId === null || requestParameters.emojiId === undefined) {
            throw new runtime.RequiredError('emojiId','Required parameter requestParameters.emojiId was null or undefined when calling deleteGuildEmoji.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/emojis/{emoji_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"emoji_id"}}`, encodeURIComponent(String(requestParameters.emojiId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteGuildEmoji(requestParameters: DeleteGuildEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGuildEmojiRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGuildIntegrationRaw(requestParameters: DeleteGuildIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling deleteGuildIntegration.');
        }

        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling deleteGuildIntegration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/integrations/{integration_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"integration_id"}}`, encodeURIComponent(String(requestParameters.integrationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteGuildIntegration(requestParameters: DeleteGuildIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGuildIntegrationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGuildMemberRaw(requestParameters: DeleteGuildMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling deleteGuildMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteGuildMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/members/{user_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteGuildMember(requestParameters: DeleteGuildMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGuildMemberRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGuildMemberRoleRaw(requestParameters: DeleteGuildMemberRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling deleteGuildMemberRole.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteGuildMemberRole.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling deleteGuildMemberRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/members/{user_id}/roles/{role_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteGuildMemberRole(requestParameters: DeleteGuildMemberRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGuildMemberRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGuildRoleRaw(requestParameters: DeleteGuildRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling deleteGuildRole.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling deleteGuildRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/roles/{role_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteGuildRole(requestParameters: DeleteGuildRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGuildRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGuildScheduledEventRaw(requestParameters: DeleteGuildScheduledEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling deleteGuildScheduledEvent.');
        }

        if (requestParameters.guildScheduledEventId === null || requestParameters.guildScheduledEventId === undefined) {
            throw new runtime.RequiredError('guildScheduledEventId','Required parameter requestParameters.guildScheduledEventId was null or undefined when calling deleteGuildScheduledEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"guild_scheduled_event_id"}}`, encodeURIComponent(String(requestParameters.guildScheduledEventId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteGuildScheduledEvent(requestParameters: DeleteGuildScheduledEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGuildScheduledEventRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGuildStickerRaw(requestParameters: DeleteGuildStickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling deleteGuildSticker.');
        }

        if (requestParameters.stickerId === null || requestParameters.stickerId === undefined) {
            throw new runtime.RequiredError('stickerId','Required parameter requestParameters.stickerId was null or undefined when calling deleteGuildSticker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/stickers/{sticker_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"sticker_id"}}`, encodeURIComponent(String(requestParameters.stickerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteGuildSticker(requestParameters: DeleteGuildStickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGuildStickerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGuildTemplateRaw(requestParameters: DeleteGuildTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildTemplateResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling deleteGuildTemplate.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling deleteGuildTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/templates/{code}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildTemplateResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteGuildTemplate(requestParameters: DeleteGuildTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildTemplateResponse> {
        const response = await this.deleteGuildTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteMessageRaw(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling deleteMessage.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling deleteMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages/{message_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteMessage(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMessageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteMyMessageReactionRaw(requestParameters: DeleteMyMessageReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling deleteMyMessageReaction.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling deleteMyMessageReaction.');
        }

        if (requestParameters.emojiName === null || requestParameters.emojiName === undefined) {
            throw new runtime.RequiredError('emojiName','Required parameter requestParameters.emojiName was null or undefined when calling deleteMyMessageReaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}/@me`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))).replace(`{${"emoji_name"}}`, encodeURIComponent(String(requestParameters.emojiName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteMyMessageReaction(requestParameters: DeleteMyMessageReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMyMessageReactionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteOriginalWebhookMessageRaw(requestParameters: DeleteOriginalWebhookMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling deleteOriginalWebhookMessage.');
        }

        if (requestParameters.webhookToken === null || requestParameters.webhookToken === undefined) {
            throw new runtime.RequiredError('webhookToken','Required parameter requestParameters.webhookToken was null or undefined when calling deleteOriginalWebhookMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.threadId !== undefined) {
            queryParameters['thread_id'] = requestParameters.threadId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}/{webhook_token}/messages/@original`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"webhook_token"}}`, encodeURIComponent(String(requestParameters.webhookToken))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteOriginalWebhookMessage(requestParameters: DeleteOriginalWebhookMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOriginalWebhookMessageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteStageInstanceRaw(requestParameters: DeleteStageInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling deleteStageInstance.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling deleteStageInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/stage-instances/{channel_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteStageInstance(requestParameters: DeleteStageInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStageInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteThreadMemberRaw(requestParameters: DeleteThreadMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling deleteThreadMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteThreadMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/thread-members/{user_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteThreadMember(requestParameters: DeleteThreadMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteThreadMemberRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteUserMessageReactionRaw(requestParameters: DeleteUserMessageReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling deleteUserMessageReaction.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling deleteUserMessageReaction.');
        }

        if (requestParameters.emojiName === null || requestParameters.emojiName === undefined) {
            throw new runtime.RequiredError('emojiName','Required parameter requestParameters.emojiName was null or undefined when calling deleteUserMessageReaction.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUserMessageReaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}/{user_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))).replace(`{${"emoji_name"}}`, encodeURIComponent(String(requestParameters.emojiName))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserMessageReaction(requestParameters: DeleteUserMessageReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserMessageReactionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteWebhookRaw(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling deleteWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteWebhook(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWebhookRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteWebhookByTokenRaw(requestParameters: DeleteWebhookByTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling deleteWebhookByToken.');
        }

        if (requestParameters.webhookToken === null || requestParameters.webhookToken === undefined) {
            throw new runtime.RequiredError('webhookToken','Required parameter requestParameters.webhookToken was null or undefined when calling deleteWebhookByToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}/{webhook_token}`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"webhook_token"}}`, encodeURIComponent(String(requestParameters.webhookToken))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteWebhookByToken(requestParameters: DeleteWebhookByTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWebhookByTokenRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteWebhookMessageRaw(requestParameters: DeleteWebhookMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling deleteWebhookMessage.');
        }

        if (requestParameters.webhookToken === null || requestParameters.webhookToken === undefined) {
            throw new runtime.RequiredError('webhookToken','Required parameter requestParameters.webhookToken was null or undefined when calling deleteWebhookMessage.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling deleteWebhookMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.threadId !== undefined) {
            queryParameters['thread_id'] = requestParameters.threadId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"webhook_token"}}`, encodeURIComponent(String(requestParameters.webhookToken))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteWebhookMessage(requestParameters: DeleteWebhookMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWebhookMessageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async executeGithubCompatibleWebhookRaw(requestParameters: ExecuteGithubCompatibleWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling executeGithubCompatibleWebhook.');
        }

        if (requestParameters.webhookToken === null || requestParameters.webhookToken === undefined) {
            throw new runtime.RequiredError('webhookToken','Required parameter requestParameters.webhookToken was null or undefined when calling executeGithubCompatibleWebhook.');
        }

        if (requestParameters.githubWebhook === null || requestParameters.githubWebhook === undefined) {
            throw new runtime.RequiredError('githubWebhook','Required parameter requestParameters.githubWebhook was null or undefined when calling executeGithubCompatibleWebhook.');
        }

        const queryParameters: any = {};

        if (requestParameters.wait !== undefined) {
            queryParameters['wait'] = requestParameters.wait;
        }

        if (requestParameters.threadId !== undefined) {
            queryParameters['thread_id'] = requestParameters.threadId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}/{webhook_token}/github`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"webhook_token"}}`, encodeURIComponent(String(requestParameters.webhookToken))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubWebhookToJSON(requestParameters.githubWebhook),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async executeGithubCompatibleWebhook(requestParameters: ExecuteGithubCompatibleWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.executeGithubCompatibleWebhookRaw(requestParameters, initOverrides);
    }

    /**
     */
    async executeSlackCompatibleWebhookRaw(requestParameters: ExecuteSlackCompatibleWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling executeSlackCompatibleWebhook.');
        }

        if (requestParameters.webhookToken === null || requestParameters.webhookToken === undefined) {
            throw new runtime.RequiredError('webhookToken','Required parameter requestParameters.webhookToken was null or undefined when calling executeSlackCompatibleWebhook.');
        }

        if (requestParameters.slackWebhook === null || requestParameters.slackWebhook === undefined) {
            throw new runtime.RequiredError('slackWebhook','Required parameter requestParameters.slackWebhook was null or undefined when calling executeSlackCompatibleWebhook.');
        }

        const queryParameters: any = {};

        if (requestParameters.wait !== undefined) {
            queryParameters['wait'] = requestParameters.wait;
        }

        if (requestParameters.threadId !== undefined) {
            queryParameters['thread_id'] = requestParameters.threadId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}/{webhook_token}/slack`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"webhook_token"}}`, encodeURIComponent(String(requestParameters.webhookToken))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SlackWebhookToJSON(requestParameters.slackWebhook),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async executeSlackCompatibleWebhook(requestParameters: ExecuteSlackCompatibleWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.executeSlackCompatibleWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async executeWebhookRaw(requestParameters: ExecuteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling executeWebhook.');
        }

        if (requestParameters.webhookToken === null || requestParameters.webhookToken === undefined) {
            throw new runtime.RequiredError('webhookToken','Required parameter requestParameters.webhookToken was null or undefined when calling executeWebhook.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling executeWebhook.');
        }

        const queryParameters: any = {};

        if (requestParameters.wait !== undefined) {
            queryParameters['wait'] = requestParameters.wait;
        }

        if (requestParameters.threadId !== undefined) {
            queryParameters['thread_id'] = requestParameters.threadId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}/{webhook_token}`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"webhook_token"}}`, encodeURIComponent(String(requestParameters.webhookToken))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     */
    async executeWebhook(requestParameters: ExecuteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.executeWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async followChannelRaw(requestParameters: FollowChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelFollowerResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling followChannel.');
        }

        if (requestParameters.followChannelRequest === null || requestParameters.followChannelRequest === undefined) {
            throw new runtime.RequiredError('followChannelRequest','Required parameter requestParameters.followChannelRequest was null or undefined when calling followChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/followers`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FollowChannelRequestToJSON(requestParameters.followChannelRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelFollowerResponseFromJSON(jsonValue));
    }

    /**
     */
    async followChannel(requestParameters: FollowChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelFollowerResponse> {
        const response = await this.followChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getActiveGuildThreadsRaw(requestParameters: GetActiveGuildThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThreadsResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getActiveGuildThreads.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/threads/active`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadsResponseFromJSON(jsonValue));
    }

    /**
     */
    async getActiveGuildThreads(requestParameters: GetActiveGuildThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThreadsResponse> {
        const response = await this.getActiveGuildThreadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApplicationRaw(requestParameters: GetApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateApplicationResponse>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling getApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateApplicationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getApplication(requestParameters: GetApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateApplicationResponse> {
        const response = await this.getApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApplicationCommandRaw(requestParameters: GetApplicationCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationCommandResponse>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling getApplicationCommand.');
        }

        if (requestParameters.commandId === null || requestParameters.commandId === undefined) {
            throw new runtime.RequiredError('commandId','Required parameter requestParameters.commandId was null or undefined when calling getApplicationCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["applications.commands.update"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/commands/{command_id}`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"command_id"}}`, encodeURIComponent(String(requestParameters.commandId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationCommandResponseFromJSON(jsonValue));
    }

    /**
     */
    async getApplicationCommand(requestParameters: GetApplicationCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationCommandResponse> {
        const response = await this.getApplicationCommandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApplicationRoleConnectionsMetadataRaw(requestParameters: GetApplicationRoleConnectionsMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling getApplicationRoleConnectionsMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/role-connections/metadata`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getApplicationRoleConnectionsMetadata(requestParameters: GetApplicationRoleConnectionsMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getApplicationRoleConnectionsMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApplicationUserRoleConnectionRaw(requestParameters: GetApplicationUserRoleConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationUserRoleConnectionResponse>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling getApplicationUserRoleConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["role_connections.write"]);
        }

        const response = await this.request({
            path: `/users/@me/applications/{application_id}/role-connection`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationUserRoleConnectionResponseFromJSON(jsonValue));
    }

    /**
     */
    async getApplicationUserRoleConnection(requestParameters: GetApplicationUserRoleConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationUserRoleConnectionResponse> {
        const response = await this.getApplicationUserRoleConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAutoModerationRuleRaw(requestParameters: GetAutoModerationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getAutoModerationRule.');
        }

        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling getAutoModerationRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/auto-moderation/rules/{rule_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"rule_id"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getAutoModerationRule(requestParameters: GetAutoModerationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getAutoModerationRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBotGatewayRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GatewayBotResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/gateway/bot`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewayBotResponseFromJSON(jsonValue));
    }

    /**
     */
    async getBotGateway(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GatewayBotResponse> {
        const response = await this.getBotGatewayRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getChannelRaw(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling getChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getChannel(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGatewayRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GatewayResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/gateway`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewayResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGateway(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GatewayResponse> {
        const response = await this.getGatewayRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildRaw(requestParameters: GetGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildWithCountsResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuild.');
        }

        const queryParameters: any = {};

        if (requestParameters.withCounts !== undefined) {
            queryParameters['with_counts'] = requestParameters.withCounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildWithCountsResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuild(requestParameters: GetGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildWithCountsResponse> {
        const response = await this.getGuildRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildApplicationCommandRaw(requestParameters: GetGuildApplicationCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationCommandResponse>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling getGuildApplicationCommand.');
        }

        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildApplicationCommand.');
        }

        if (requestParameters.commandId === null || requestParameters.commandId === undefined) {
            throw new runtime.RequiredError('commandId','Required parameter requestParameters.commandId was null or undefined when calling getGuildApplicationCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["applications.commands.update"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/guilds/{guild_id}/commands/{command_id}`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"command_id"}}`, encodeURIComponent(String(requestParameters.commandId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationCommandResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildApplicationCommand(requestParameters: GetGuildApplicationCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationCommandResponse> {
        const response = await this.getGuildApplicationCommandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildApplicationCommandPermissionsRaw(requestParameters: GetGuildApplicationCommandPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommandPermissionsResponse>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling getGuildApplicationCommandPermissions.');
        }

        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildApplicationCommandPermissions.');
        }

        if (requestParameters.commandId === null || requestParameters.commandId === undefined) {
            throw new runtime.RequiredError('commandId','Required parameter requestParameters.commandId was null or undefined when calling getGuildApplicationCommandPermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["activities.read", "activities.write", "applications.builds.read", "applications.builds.upload", "applications.commands", "applications.commands.permissions.update", "applications.entitlements", "applications.store.update", "bot", "connections", "dm_channels.read", "email", "gdm.join", "guilds", "guilds.join", "guilds.members.read", "identify", "messages.read", "relationships.read", "rpc", "rpc.activities.write", "rpc.notifications.read", "rpc.screenshare.read", "rpc.screenshare.write", "rpc.video.read", "rpc.video.write", "rpc.voice.read", "rpc.voice.write", "voice", "webhook.incoming"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["activities.read", "activities.write", "applications.builds.read", "applications.builds.upload", "applications.commands", "applications.commands.permissions.update", "applications.commands.update", "applications.entitlements", "applications.store.update", "bot", "connections", "dm_channels.read", "email", "gdm.join", "guilds", "guilds.join", "guilds.members.read", "identify", "messages.read", "relationships.read", "rpc", "rpc.activities.write", "rpc.notifications.read", "rpc.screenshare.read", "rpc.screenshare.write", "rpc.video.read", "rpc.video.write", "rpc.voice.read", "rpc.voice.write", "voice", "webhook.incoming"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["activities.read", "activities.write", "applications.builds.read", "applications.builds.upload", "applications.commands", "applications.commands.permissions.update", "applications.entitlements", "applications.store.update", "bot", "connections", "dm_channels.read", "email", "gdm.join", "guilds", "guilds.join", "guilds.members.read", "identify", "messages.read", "relationships.read", "role_connections.write", "rpc", "rpc.activities.write", "rpc.notifications.read", "rpc.screenshare.read", "rpc.screenshare.write", "rpc.video.read", "rpc.video.write", "rpc.voice.read", "rpc.voice.write", "voice", "webhook.incoming"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/guilds/{guild_id}/commands/{command_id}/permissions`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"command_id"}}`, encodeURIComponent(String(requestParameters.commandId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommandPermissionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildApplicationCommandPermissions(requestParameters: GetGuildApplicationCommandPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommandPermissionsResponse> {
        const response = await this.getGuildApplicationCommandPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildBanRaw(requestParameters: GetGuildBanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildBanResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildBan.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getGuildBan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/bans/{user_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildBanResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildBan(requestParameters: GetGuildBanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildBanResponse> {
        const response = await this.getGuildBanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildEmojiRaw(requestParameters: GetGuildEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmojiResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildEmoji.');
        }

        if (requestParameters.emojiId === null || requestParameters.emojiId === undefined) {
            throw new runtime.RequiredError('emojiId','Required parameter requestParameters.emojiId was null or undefined when calling getGuildEmoji.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/emojis/{emoji_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"emoji_id"}}`, encodeURIComponent(String(requestParameters.emojiId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmojiResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildEmoji(requestParameters: GetGuildEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmojiResponse> {
        const response = await this.getGuildEmojiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildMemberRaw(requestParameters: GetGuildMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildMemberResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getGuildMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/members/{user_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildMemberResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildMember(requestParameters: GetGuildMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildMemberResponse> {
        const response = await this.getGuildMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildNewMemberWelcomeRaw(requestParameters: GetGuildNewMemberWelcomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildHomeSettingsResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildNewMemberWelcome.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/new-member-welcome`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildHomeSettingsResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildNewMemberWelcome(requestParameters: GetGuildNewMemberWelcomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildHomeSettingsResponse> {
        const response = await this.getGuildNewMemberWelcomeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildPreviewRaw(requestParameters: GetGuildPreviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildPreviewResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildPreview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/preview`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildPreviewResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildPreview(requestParameters: GetGuildPreviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildPreviewResponse> {
        const response = await this.getGuildPreviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildScheduledEventRaw(requestParameters: GetGuildScheduledEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildScheduledEvent.');
        }

        if (requestParameters.guildScheduledEventId === null || requestParameters.guildScheduledEventId === undefined) {
            throw new runtime.RequiredError('guildScheduledEventId','Required parameter requestParameters.guildScheduledEventId was null or undefined when calling getGuildScheduledEvent.');
        }

        const queryParameters: any = {};

        if (requestParameters.withUserCount !== undefined) {
            queryParameters['with_user_count'] = requestParameters.withUserCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"guild_scheduled_event_id"}}`, encodeURIComponent(String(requestParameters.guildScheduledEventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getGuildScheduledEvent(requestParameters: GetGuildScheduledEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getGuildScheduledEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildStickerRaw(requestParameters: GetGuildStickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildStickerResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildSticker.');
        }

        if (requestParameters.stickerId === null || requestParameters.stickerId === undefined) {
            throw new runtime.RequiredError('stickerId','Required parameter requestParameters.stickerId was null or undefined when calling getGuildSticker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/stickers/{sticker_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"sticker_id"}}`, encodeURIComponent(String(requestParameters.stickerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildStickerResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildSticker(requestParameters: GetGuildStickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildStickerResponse> {
        const response = await this.getGuildStickerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildTemplateRaw(requestParameters: GetGuildTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildTemplateResponse>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getGuildTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/templates/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildTemplateResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildTemplate(requestParameters: GetGuildTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildTemplateResponse> {
        const response = await this.getGuildTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildVanityUrlRaw(requestParameters: GetGuildVanityUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VanityURLResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildVanityUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/vanity-url`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VanityURLResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildVanityUrl(requestParameters: GetGuildVanityUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VanityURLResponse> {
        const response = await this.getGuildVanityUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildWebhooksRaw(requestParameters: GetGuildWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildWebhooks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/webhooks`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getGuildWebhooks(requestParameters: GetGuildWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getGuildWebhooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildWelcomeScreenRaw(requestParameters: GetGuildWelcomeScreenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildWelcomeScreenResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildWelcomeScreen.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/welcome-screen`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildWelcomeScreenResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildWelcomeScreen(requestParameters: GetGuildWelcomeScreenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildWelcomeScreenResponse> {
        const response = await this.getGuildWelcomeScreenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildWidgetRaw(requestParameters: GetGuildWidgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WidgetResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildWidget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/widget.json`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WidgetResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildWidget(requestParameters: GetGuildWidgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WidgetResponse> {
        const response = await this.getGuildWidgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildWidgetPngRaw(requestParameters: GetGuildWidgetPngRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildWidgetPng.');
        }

        const queryParameters: any = {};

        if (requestParameters.style !== undefined) {
            queryParameters['style'] = requestParameters.style;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/widget.png`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getGuildWidgetPng(requestParameters: GetGuildWidgetPngRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getGuildWidgetPngRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildWidgetSettingsRaw(requestParameters: GetGuildWidgetSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WidgetSettingsResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildWidgetSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/widget`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WidgetSettingsResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildWidgetSettings(requestParameters: GetGuildWidgetSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WidgetSettingsResponse> {
        const response = await this.getGuildWidgetSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuildsOnboardingRaw(requestParameters: GetGuildsOnboardingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserGuildOnboardingResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getGuildsOnboarding.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/onboarding`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserGuildOnboardingResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGuildsOnboarding(requestParameters: GetGuildsOnboardingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserGuildOnboardingResponse> {
        const response = await this.getGuildsOnboardingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMessageRaw(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling getMessage.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling getMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages/{message_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     */
    async getMessage(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.getMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMyApplicationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateApplicationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/@me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateApplicationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getMyApplication(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateApplicationResponse> {
        const response = await this.getMyApplicationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getMyGuildMemberRaw(requestParameters: GetMyGuildMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateGuildMemberResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling getMyGuildMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["guilds.members.read"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["guilds.members.read"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["guilds.members.read"]);
        }

        const response = await this.request({
            path: `/users/@me/guilds/{guild_id}/member`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateGuildMemberResponseFromJSON(jsonValue));
    }

    /**
     */
    async getMyGuildMember(requestParameters: GetMyGuildMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateGuildMemberResponse> {
        const response = await this.getMyGuildMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMyOauth2ApplicationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMyOAuth2ApplicationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/oauth2/applications/@me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMyOAuth2ApplicationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getMyOauth2Application(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMyOAuth2ApplicationResponse> {
        const response = await this.getMyOauth2ApplicationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getMyOauth2AuthorizationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2GetAuthorizationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["activities.read", "activities.write", "applications.builds.read", "applications.builds.upload", "applications.commands", "applications.commands.permissions.update", "applications.entitlements", "applications.store.update", "bot", "connections", "dm_channels.read", "email", "gdm.join", "guilds", "guilds.join", "guilds.members.read", "identify", "messages.read", "relationships.read", "rpc", "rpc.activities.write", "rpc.notifications.read", "rpc.screenshare.read", "rpc.screenshare.write", "rpc.video.read", "rpc.video.write", "rpc.voice.read", "rpc.voice.write", "voice", "webhook.incoming"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["activities.read", "activities.write", "applications.builds.read", "applications.builds.upload", "applications.commands", "applications.commands.permissions.update", "applications.commands.update", "applications.entitlements", "applications.store.update", "bot", "connections", "dm_channels.read", "email", "gdm.join", "guilds", "guilds.join", "guilds.members.read", "identify", "messages.read", "relationships.read", "rpc", "rpc.activities.write", "rpc.notifications.read", "rpc.screenshare.read", "rpc.screenshare.write", "rpc.video.read", "rpc.video.write", "rpc.voice.read", "rpc.voice.write", "voice", "webhook.incoming"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["activities.read", "activities.write", "applications.builds.read", "applications.builds.upload", "applications.commands", "applications.commands.permissions.update", "applications.entitlements", "applications.store.update", "bot", "connections", "dm_channels.read", "email", "gdm.join", "guilds", "guilds.join", "guilds.members.read", "identify", "messages.read", "relationships.read", "role_connections.write", "rpc", "rpc.activities.write", "rpc.notifications.read", "rpc.screenshare.read", "rpc.screenshare.write", "rpc.video.read", "rpc.video.write", "rpc.voice.read", "rpc.voice.write", "voice", "webhook.incoming"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/oauth2/@me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2GetAuthorizationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getMyOauth2Authorization(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2GetAuthorizationResponse> {
        const response = await this.getMyOauth2AuthorizationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getMyUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPIIResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["identify"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["identify"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["identify"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/users/@me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPIIResponseFromJSON(jsonValue));
    }

    /**
     */
    async getMyUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPIIResponse> {
        const response = await this.getMyUserRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getOriginalWebhookMessageRaw(requestParameters: GetOriginalWebhookMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling getOriginalWebhookMessage.');
        }

        if (requestParameters.webhookToken === null || requestParameters.webhookToken === undefined) {
            throw new runtime.RequiredError('webhookToken','Required parameter requestParameters.webhookToken was null or undefined when calling getOriginalWebhookMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.threadId !== undefined) {
            queryParameters['thread_id'] = requestParameters.threadId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}/{webhook_token}/messages/@original`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"webhook_token"}}`, encodeURIComponent(String(requestParameters.webhookToken))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     */
    async getOriginalWebhookMessage(requestParameters: GetOriginalWebhookMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.getOriginalWebhookMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getStageInstanceRaw(requestParameters: GetStageInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageInstanceResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling getStageInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/stage-instances/{channel_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageInstanceResponseFromJSON(jsonValue));
    }

    /**
     */
    async getStageInstance(requestParameters: GetStageInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageInstanceResponse> {
        const response = await this.getStageInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getStickerRaw(requestParameters: GetStickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.stickerId === null || requestParameters.stickerId === undefined) {
            throw new runtime.RequiredError('stickerId','Required parameter requestParameters.stickerId was null or undefined when calling getSticker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/stickers/{sticker_id}`.replace(`{${"sticker_id"}}`, encodeURIComponent(String(requestParameters.stickerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getSticker(requestParameters: GetStickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getStickerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getThreadMemberRaw(requestParameters: GetThreadMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThreadMemberResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling getThreadMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getThreadMember.');
        }

        const queryParameters: any = {};

        if (requestParameters.withMember !== undefined) {
            queryParameters['with_member'] = requestParameters.withMember;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/thread-members/{user_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadMemberResponseFromJSON(jsonValue));
    }

    /**
     */
    async getThreadMember(requestParameters: GetThreadMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThreadMemberResponse> {
        const response = await this.getThreadMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWebhookRaw(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling getWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getWebhook(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWebhookByTokenRaw(requestParameters: GetWebhookByTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling getWebhookByToken.');
        }

        if (requestParameters.webhookToken === null || requestParameters.webhookToken === undefined) {
            throw new runtime.RequiredError('webhookToken','Required parameter requestParameters.webhookToken was null or undefined when calling getWebhookByToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}/{webhook_token}`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"webhook_token"}}`, encodeURIComponent(String(requestParameters.webhookToken))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getWebhookByToken(requestParameters: GetWebhookByTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getWebhookByTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWebhookMessageRaw(requestParameters: GetWebhookMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling getWebhookMessage.');
        }

        if (requestParameters.webhookToken === null || requestParameters.webhookToken === undefined) {
            throw new runtime.RequiredError('webhookToken','Required parameter requestParameters.webhookToken was null or undefined when calling getWebhookMessage.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling getWebhookMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.threadId !== undefined) {
            queryParameters['thread_id'] = requestParameters.threadId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"webhook_token"}}`, encodeURIComponent(String(requestParameters.webhookToken))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     */
    async getWebhookMessage(requestParameters: GetWebhookMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.getWebhookMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async inviteResolveRaw(requestParameters: InviteResolveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling inviteResolve.');
        }

        const queryParameters: any = {};

        if (requestParameters.withCounts !== undefined) {
            queryParameters['with_counts'] = requestParameters.withCounts;
        }

        if (requestParameters.guildScheduledEventId !== undefined) {
            queryParameters['guild_scheduled_event_id'] = requestParameters.guildScheduledEventId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/invites/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async inviteResolve(requestParameters: InviteResolveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.inviteResolveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async inviteRevokeRaw(requestParameters: InviteRevokeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling inviteRevoke.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/invites/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async inviteRevoke(requestParameters: InviteRevokeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.inviteRevokeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async joinThreadRaw(requestParameters: JoinThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling joinThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/thread-members/@me`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async joinThread(requestParameters: JoinThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.joinThreadRaw(requestParameters, initOverrides);
    }

    /**
     */
    async leaveGuildRaw(requestParameters: LeaveGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling leaveGuild.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling leaveGuild.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/users/@me/guilds/{guild_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async leaveGuild(requestParameters: LeaveGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.leaveGuildRaw(requestParameters, initOverrides);
    }

    /**
     */
    async leaveThreadRaw(requestParameters: LeaveThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling leaveThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/thread-members/@me`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async leaveThread(requestParameters: LeaveThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.leaveThreadRaw(requestParameters, initOverrides);
    }

    /**
     */
    async listApplicationCommandsRaw(requestParameters: ListApplicationCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling listApplicationCommands.');
        }

        const queryParameters: any = {};

        if (requestParameters.withLocalizations !== undefined) {
            queryParameters['with_localizations'] = requestParameters.withLocalizations;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["applications.commands.update"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/commands`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listApplicationCommands(requestParameters: ListApplicationCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listApplicationCommandsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listAutoModerationRulesRaw(requestParameters: ListAutoModerationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listAutoModerationRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/auto-moderation/rules`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listAutoModerationRules(requestParameters: ListAutoModerationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listAutoModerationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listChannelInvitesRaw(requestParameters: ListChannelInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling listChannelInvites.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/invites`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listChannelInvites(requestParameters: ListChannelInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listChannelInvitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listChannelWebhooksRaw(requestParameters: ListChannelWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling listChannelWebhooks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/webhooks`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listChannelWebhooks(requestParameters: ListChannelWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listChannelWebhooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildApplicationCommandPermissionsRaw(requestParameters: ListGuildApplicationCommandPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling listGuildApplicationCommandPermissions.');
        }

        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildApplicationCommandPermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["activities.read", "activities.write", "applications.builds.read", "applications.builds.upload", "applications.commands", "applications.commands.permissions.update", "applications.entitlements", "applications.store.update", "bot", "connections", "dm_channels.read", "email", "gdm.join", "guilds", "guilds.join", "guilds.members.read", "identify", "messages.read", "relationships.read", "rpc", "rpc.activities.write", "rpc.notifications.read", "rpc.screenshare.read", "rpc.screenshare.write", "rpc.video.read", "rpc.video.write", "rpc.voice.read", "rpc.voice.write", "voice", "webhook.incoming"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["activities.read", "activities.write", "applications.builds.read", "applications.builds.upload", "applications.commands", "applications.commands.permissions.update", "applications.commands.update", "applications.entitlements", "applications.store.update", "bot", "connections", "dm_channels.read", "email", "gdm.join", "guilds", "guilds.join", "guilds.members.read", "identify", "messages.read", "relationships.read", "rpc", "rpc.activities.write", "rpc.notifications.read", "rpc.screenshare.read", "rpc.screenshare.write", "rpc.video.read", "rpc.video.write", "rpc.voice.read", "rpc.voice.write", "voice", "webhook.incoming"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["activities.read", "activities.write", "applications.builds.read", "applications.builds.upload", "applications.commands", "applications.commands.permissions.update", "applications.entitlements", "applications.store.update", "bot", "connections", "dm_channels.read", "email", "gdm.join", "guilds", "guilds.join", "guilds.members.read", "identify", "messages.read", "relationships.read", "role_connections.write", "rpc", "rpc.activities.write", "rpc.notifications.read", "rpc.screenshare.read", "rpc.screenshare.write", "rpc.video.read", "rpc.video.write", "rpc.voice.read", "rpc.voice.write", "voice", "webhook.incoming"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/guilds/{guild_id}/commands/permissions`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildApplicationCommandPermissions(requestParameters: ListGuildApplicationCommandPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildApplicationCommandPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildApplicationCommandsRaw(requestParameters: ListGuildApplicationCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling listGuildApplicationCommands.');
        }

        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildApplicationCommands.');
        }

        const queryParameters: any = {};

        if (requestParameters.withLocalizations !== undefined) {
            queryParameters['with_localizations'] = requestParameters.withLocalizations;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["applications.commands.update"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/guilds/{guild_id}/commands`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildApplicationCommands(requestParameters: ListGuildApplicationCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildApplicationCommandsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildAuditLogEntriesRaw(requestParameters: ListGuildAuditLogEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildAuditLogResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildAuditLogEntries.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.actionType !== undefined) {
            queryParameters['action_type'] = requestParameters.actionType;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/audit-logs`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildAuditLogResponseFromJSON(jsonValue));
    }

    /**
     */
    async listGuildAuditLogEntries(requestParameters: ListGuildAuditLogEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildAuditLogResponse> {
        const response = await this.listGuildAuditLogEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildBansRaw(requestParameters: ListGuildBansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildBans.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/bans`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildBans(requestParameters: ListGuildBansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildBansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildChannelsRaw(requestParameters: ListGuildChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildChannels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/channels`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildChannels(requestParameters: ListGuildChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildChannelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildEmojisRaw(requestParameters: ListGuildEmojisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildEmojis.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/emojis`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildEmojis(requestParameters: ListGuildEmojisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildEmojisRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildIntegrationsRaw(requestParameters: ListGuildIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildIntegrations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/integrations`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildIntegrations(requestParameters: ListGuildIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildIntegrationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildInvitesRaw(requestParameters: ListGuildInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildInvites.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/invites`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildInvites(requestParameters: ListGuildInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildInvitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildMembersRaw(requestParameters: ListGuildMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildMembers.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/members`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildMembers(requestParameters: ListGuildMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildRolesRaw(requestParameters: ListGuildRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildRoles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/roles`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildRoles(requestParameters: ListGuildRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildScheduledEventUsersRaw(requestParameters: ListGuildScheduledEventUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildScheduledEventUsers.');
        }

        if (requestParameters.guildScheduledEventId === null || requestParameters.guildScheduledEventId === undefined) {
            throw new runtime.RequiredError('guildScheduledEventId','Required parameter requestParameters.guildScheduledEventId was null or undefined when calling listGuildScheduledEventUsers.');
        }

        const queryParameters: any = {};

        if (requestParameters.withMember !== undefined) {
            queryParameters['with_member'] = requestParameters.withMember;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}/users`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"guild_scheduled_event_id"}}`, encodeURIComponent(String(requestParameters.guildScheduledEventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildScheduledEventUsers(requestParameters: ListGuildScheduledEventUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildScheduledEventUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildScheduledEventsRaw(requestParameters: ListGuildScheduledEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildScheduledEvents.');
        }

        const queryParameters: any = {};

        if (requestParameters.withUserCount !== undefined) {
            queryParameters['with_user_count'] = requestParameters.withUserCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/scheduled-events`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildScheduledEvents(requestParameters: ListGuildScheduledEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildScheduledEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildStickersRaw(requestParameters: ListGuildStickersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildStickers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/stickers`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildStickers(requestParameters: ListGuildStickersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildStickersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildTemplatesRaw(requestParameters: ListGuildTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildTemplates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/templates`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildTemplates(requestParameters: ListGuildTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGuildVoiceRegionsRaw(requestParameters: ListGuildVoiceRegionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling listGuildVoiceRegions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/regions`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listGuildVoiceRegions(requestParameters: ListGuildVoiceRegionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listGuildVoiceRegionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listMessageReactionsByEmojiRaw(requestParameters: ListMessageReactionsByEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling listMessageReactionsByEmoji.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling listMessageReactionsByEmoji.');
        }

        if (requestParameters.emojiName === null || requestParameters.emojiName === undefined) {
            throw new runtime.RequiredError('emojiName','Required parameter requestParameters.emojiName was null or undefined when calling listMessageReactionsByEmoji.');
        }

        const queryParameters: any = {};

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))).replace(`{${"emoji_name"}}`, encodeURIComponent(String(requestParameters.emojiName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listMessageReactionsByEmoji(requestParameters: ListMessageReactionsByEmojiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listMessageReactionsByEmojiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listMessagesRaw(requestParameters: ListMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling listMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.around !== undefined) {
            queryParameters['around'] = requestParameters.around;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listMessages(requestParameters: ListMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listMyConnectionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["connections"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["connections"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["connections"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/users/@me/connections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listMyConnections(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listMyConnectionsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listMyGuildsRaw(requestParameters: ListMyGuildsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.withCounts !== undefined) {
            queryParameters['with_counts'] = requestParameters.withCounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["guilds"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["guilds"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["guilds"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/users/@me/guilds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listMyGuilds(requestParameters: ListMyGuildsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listMyGuildsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listMyPrivateArchivedThreadsRaw(requestParameters: ListMyPrivateArchivedThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThreadsResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling listMyPrivateArchivedThreads.');
        }

        const queryParameters: any = {};

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/users/@me/threads/archived/private`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadsResponseFromJSON(jsonValue));
    }

    /**
     */
    async listMyPrivateArchivedThreads(requestParameters: ListMyPrivateArchivedThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThreadsResponse> {
        const response = await this.listMyPrivateArchivedThreadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listPinnedMessagesRaw(requestParameters: ListPinnedMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling listPinnedMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/pins`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listPinnedMessages(requestParameters: ListPinnedMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listPinnedMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listPrivateArchivedThreadsRaw(requestParameters: ListPrivateArchivedThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThreadsResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling listPrivateArchivedThreads.');
        }

        const queryParameters: any = {};

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/threads/archived/private`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadsResponseFromJSON(jsonValue));
    }

    /**
     */
    async listPrivateArchivedThreads(requestParameters: ListPrivateArchivedThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThreadsResponse> {
        const response = await this.listPrivateArchivedThreadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listPublicArchivedThreadsRaw(requestParameters: ListPublicArchivedThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThreadsResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling listPublicArchivedThreads.');
        }

        const queryParameters: any = {};

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/threads/archived/public`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadsResponseFromJSON(jsonValue));
    }

    /**
     */
    async listPublicArchivedThreads(requestParameters: ListPublicArchivedThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThreadsResponse> {
        const response = await this.listPublicArchivedThreadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listStickerPacksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StickerPackCollectionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/sticker-packs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StickerPackCollectionResponseFromJSON(jsonValue));
    }

    /**
     */
    async listStickerPacks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StickerPackCollectionResponse> {
        const response = await this.listStickerPacksRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listThreadMembersRaw(requestParameters: ListThreadMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling listThreadMembers.');
        }

        const queryParameters: any = {};

        if (requestParameters.withMember !== undefined) {
            queryParameters['with_member'] = requestParameters.withMember;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/thread-members`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listThreadMembers(requestParameters: ListThreadMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listThreadMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listVoiceRegionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/voice/regions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async listVoiceRegions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listVoiceRegionsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async pinMessageRaw(requestParameters: PinMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling pinMessage.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling pinMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/pins/{message_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pinMessage(requestParameters: PinMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pinMessageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async previewPruneGuildRaw(requestParameters: PreviewPruneGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildPruneResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling previewPruneGuild.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/prune`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildPruneResponseFromJSON(jsonValue));
    }

    /**
     */
    async previewPruneGuild(requestParameters: PreviewPruneGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildPruneResponse> {
        const response = await this.previewPruneGuildRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pruneGuildRaw(requestParameters: PruneGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildPruneResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling pruneGuild.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/prune`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildPruneResponseFromJSON(jsonValue));
    }

    /**
     */
    async pruneGuild(requestParameters: PruneGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildPruneResponse> {
        const response = await this.pruneGuildRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async putGuildsOnboardingRaw(requestParameters: PutGuildsOnboardingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildOnboardingResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling putGuildsOnboarding.');
        }

        if (requestParameters.updateGuildOnboardingRequest === null || requestParameters.updateGuildOnboardingRequest === undefined) {
            throw new runtime.RequiredError('updateGuildOnboardingRequest','Required parameter requestParameters.updateGuildOnboardingRequest was null or undefined when calling putGuildsOnboarding.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/onboarding`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGuildOnboardingRequestToJSON(requestParameters.updateGuildOnboardingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildOnboardingResponseFromJSON(jsonValue));
    }

    /**
     */
    async putGuildsOnboarding(requestParameters: PutGuildsOnboardingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildOnboardingResponse> {
        const response = await this.putGuildsOnboardingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchGuildMembersRaw(requestParameters: SearchGuildMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling searchGuildMembers.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling searchGuildMembers.');
        }

        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling searchGuildMembers.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/members/search`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async searchGuildMembers(requestParameters: SearchGuildMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.searchGuildMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setChannelPermissionOverwriteRaw(requestParameters: SetChannelPermissionOverwriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling setChannelPermissionOverwrite.');
        }

        if (requestParameters.overwriteId === null || requestParameters.overwriteId === undefined) {
            throw new runtime.RequiredError('overwriteId','Required parameter requestParameters.overwriteId was null or undefined when calling setChannelPermissionOverwrite.');
        }

        if (requestParameters.setChannelPermissionOverwriteRequest === null || requestParameters.setChannelPermissionOverwriteRequest === undefined) {
            throw new runtime.RequiredError('setChannelPermissionOverwriteRequest','Required parameter requestParameters.setChannelPermissionOverwriteRequest was null or undefined when calling setChannelPermissionOverwrite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/permissions/{overwrite_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"overwrite_id"}}`, encodeURIComponent(String(requestParameters.overwriteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetChannelPermissionOverwriteRequestToJSON(requestParameters.setChannelPermissionOverwriteRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async setChannelPermissionOverwrite(requestParameters: SetChannelPermissionOverwriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setChannelPermissionOverwriteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async setGuildApplicationCommandPermissionsRaw(requestParameters: SetGuildApplicationCommandPermissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommandPermissionsResponse>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling setGuildApplicationCommandPermissions.');
        }

        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling setGuildApplicationCommandPermissions.');
        }

        if (requestParameters.commandId === null || requestParameters.commandId === undefined) {
            throw new runtime.RequiredError('commandId','Required parameter requestParameters.commandId was null or undefined when calling setGuildApplicationCommandPermissions.');
        }

        if (requestParameters.setGuildApplicationCommandPermissionsRequest === null || requestParameters.setGuildApplicationCommandPermissionsRequest === undefined) {
            throw new runtime.RequiredError('setGuildApplicationCommandPermissionsRequest','Required parameter requestParameters.setGuildApplicationCommandPermissionsRequest was null or undefined when calling setGuildApplicationCommandPermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["activities.read", "activities.write", "applications.builds.read", "applications.builds.upload", "applications.commands", "applications.commands.permissions.update", "applications.entitlements", "applications.store.update", "bot", "connections", "dm_channels.read", "email", "gdm.join", "guilds", "guilds.join", "guilds.members.read", "identify", "messages.read", "relationships.read", "rpc", "rpc.activities.write", "rpc.notifications.read", "rpc.screenshare.read", "rpc.screenshare.write", "rpc.video.read", "rpc.video.write", "rpc.voice.read", "rpc.voice.write", "voice", "webhook.incoming"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["activities.read", "activities.write", "applications.builds.read", "applications.builds.upload", "applications.commands", "applications.commands.permissions.update", "applications.commands.update", "applications.entitlements", "applications.store.update", "bot", "connections", "dm_channels.read", "email", "gdm.join", "guilds", "guilds.join", "guilds.members.read", "identify", "messages.read", "relationships.read", "rpc", "rpc.activities.write", "rpc.notifications.read", "rpc.screenshare.read", "rpc.screenshare.write", "rpc.video.read", "rpc.video.write", "rpc.voice.read", "rpc.voice.write", "voice", "webhook.incoming"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["activities.read", "activities.write", "applications.builds.read", "applications.builds.upload", "applications.commands", "applications.commands.permissions.update", "applications.entitlements", "applications.store.update", "bot", "connections", "dm_channels.read", "email", "gdm.join", "guilds", "guilds.join", "guilds.members.read", "identify", "messages.read", "relationships.read", "role_connections.write", "rpc", "rpc.activities.write", "rpc.notifications.read", "rpc.screenshare.read", "rpc.screenshare.write", "rpc.video.read", "rpc.video.write", "rpc.voice.read", "rpc.voice.write", "voice", "webhook.incoming"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/guilds/{guild_id}/commands/{command_id}/permissions`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"command_id"}}`, encodeURIComponent(String(requestParameters.commandId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetGuildApplicationCommandPermissionsRequestToJSON(requestParameters.setGuildApplicationCommandPermissionsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommandPermissionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async setGuildApplicationCommandPermissions(requestParameters: SetGuildApplicationCommandPermissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommandPermissionsResponse> {
        const response = await this.setGuildApplicationCommandPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setGuildMfaLevelRaw(requestParameters: SetGuildMfaLevelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildMFALevelResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling setGuildMfaLevel.');
        }

        if (requestParameters.setGuildMfaLevelRequest === null || requestParameters.setGuildMfaLevelRequest === undefined) {
            throw new runtime.RequiredError('setGuildMfaLevelRequest','Required parameter requestParameters.setGuildMfaLevelRequest was null or undefined when calling setGuildMfaLevel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/mfa`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetGuildMfaLevelRequestToJSON(requestParameters.setGuildMfaLevelRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildMFALevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async setGuildMfaLevel(requestParameters: SetGuildMfaLevelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildMFALevelResponse> {
        const response = await this.setGuildMfaLevelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async syncGuildTemplateRaw(requestParameters: SyncGuildTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildTemplateResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling syncGuildTemplate.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling syncGuildTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/templates/{code}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildTemplateResponseFromJSON(jsonValue));
    }

    /**
     */
    async syncGuildTemplate(requestParameters: SyncGuildTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildTemplateResponse> {
        const response = await this.syncGuildTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async triggerTypingIndicatorRaw(requestParameters: TriggerTypingIndicatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling triggerTypingIndicator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/typing`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async triggerTypingIndicator(requestParameters: TriggerTypingIndicatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.triggerTypingIndicatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unbanUserFromGuildRaw(requestParameters: UnbanUserFromGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling unbanUserFromGuild.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling unbanUserFromGuild.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/bans/{user_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async unbanUserFromGuild(requestParameters: UnbanUserFromGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unbanUserFromGuildRaw(requestParameters, initOverrides);
    }

    /**
     */
    async unpinMessageRaw(requestParameters: UnpinMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling unpinMessage.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling unpinMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/pins/{message_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async unpinMessage(requestParameters: UnpinMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unpinMessageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateApplicationRaw(requestParameters: UpdateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateApplicationResponse>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling updateApplication.');
        }

        if (requestParameters.applicationFormPartial === null || requestParameters.applicationFormPartial === undefined) {
            throw new runtime.RequiredError('applicationFormPartial','Required parameter requestParameters.applicationFormPartial was null or undefined when calling updateApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationFormPartialToJSON(requestParameters.applicationFormPartial),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateApplicationResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateApplication(requestParameters: UpdateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateApplicationResponse> {
        const response = await this.updateApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateApplicationCommandRaw(requestParameters: UpdateApplicationCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationCommandResponse>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling updateApplicationCommand.');
        }

        if (requestParameters.commandId === null || requestParameters.commandId === undefined) {
            throw new runtime.RequiredError('commandId','Required parameter requestParameters.commandId was null or undefined when calling updateApplicationCommand.');
        }

        if (requestParameters.updateGuildApplicationCommandRequest === null || requestParameters.updateGuildApplicationCommandRequest === undefined) {
            throw new runtime.RequiredError('updateGuildApplicationCommandRequest','Required parameter requestParameters.updateGuildApplicationCommandRequest was null or undefined when calling updateApplicationCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["applications.commands.update"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/commands/{command_id}`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"command_id"}}`, encodeURIComponent(String(requestParameters.commandId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGuildApplicationCommandRequestToJSON(requestParameters.updateGuildApplicationCommandRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationCommandResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateApplicationCommand(requestParameters: UpdateApplicationCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationCommandResponse> {
        const response = await this.updateApplicationCommandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateApplicationRoleConnectionsMetadataRaw(requestParameters: UpdateApplicationRoleConnectionsMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling updateApplicationRoleConnectionsMetadata.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateApplicationRoleConnectionsMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/role-connections/metadata`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async updateApplicationRoleConnectionsMetadata(requestParameters: UpdateApplicationRoleConnectionsMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateApplicationRoleConnectionsMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateApplicationUserRoleConnectionRaw(requestParameters: UpdateApplicationUserRoleConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationUserRoleConnectionResponse>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling updateApplicationUserRoleConnection.');
        }

        if (requestParameters.updateApplicationUserRoleConnectionRequest === null || requestParameters.updateApplicationUserRoleConnectionRequest === undefined) {
            throw new runtime.RequiredError('updateApplicationUserRoleConnectionRequest','Required parameter requestParameters.updateApplicationUserRoleConnectionRequest was null or undefined when calling updateApplicationUserRoleConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["role_connections.write"]);
        }

        const response = await this.request({
            path: `/users/@me/applications/{application_id}/role-connection`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationUserRoleConnectionRequestToJSON(requestParameters.updateApplicationUserRoleConnectionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationUserRoleConnectionResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateApplicationUserRoleConnection(requestParameters: UpdateApplicationUserRoleConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationUserRoleConnectionResponse> {
        const response = await this.updateApplicationUserRoleConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateAutoModerationRuleRaw(requestParameters: UpdateAutoModerationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateAutoModerationRule.');
        }

        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling updateAutoModerationRule.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateAutoModerationRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/auto-moderation/rules/{rule_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"rule_id"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async updateAutoModerationRule(requestParameters: UpdateAutoModerationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateAutoModerationRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateChannelRaw(requestParameters: UpdateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling updateChannel.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async updateChannel(requestParameters: UpdateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGuildRaw(requestParameters: UpdateGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateGuild.');
        }

        if (requestParameters.guildPatchRequestPartial === null || requestParameters.guildPatchRequestPartial === undefined) {
            throw new runtime.RequiredError('guildPatchRequestPartial','Required parameter requestParameters.guildPatchRequestPartial was null or undefined when calling updateGuild.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GuildPatchRequestPartialToJSON(requestParameters.guildPatchRequestPartial),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateGuild(requestParameters: UpdateGuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildResponse> {
        const response = await this.updateGuildRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGuildApplicationCommandRaw(requestParameters: UpdateGuildApplicationCommandOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationCommandResponse>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling updateGuildApplicationCommand.');
        }

        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateGuildApplicationCommand.');
        }

        if (requestParameters.commandId === null || requestParameters.commandId === undefined) {
            throw new runtime.RequiredError('commandId','Required parameter requestParameters.commandId was null or undefined when calling updateGuildApplicationCommand.');
        }

        if (requestParameters.updateGuildApplicationCommandRequest === null || requestParameters.updateGuildApplicationCommandRequest === undefined) {
            throw new runtime.RequiredError('updateGuildApplicationCommandRequest','Required parameter requestParameters.updateGuildApplicationCommandRequest was null or undefined when calling updateGuildApplicationCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["applications.commands.update"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/{application_id}/guilds/{guild_id}/commands/{command_id}`.replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"command_id"}}`, encodeURIComponent(String(requestParameters.commandId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGuildApplicationCommandRequestToJSON(requestParameters.updateGuildApplicationCommandRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationCommandResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateGuildApplicationCommand(requestParameters: UpdateGuildApplicationCommandOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationCommandResponse> {
        const response = await this.updateGuildApplicationCommandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGuildEmojiRaw(requestParameters: UpdateGuildEmojiOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmojiResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateGuildEmoji.');
        }

        if (requestParameters.emojiId === null || requestParameters.emojiId === undefined) {
            throw new runtime.RequiredError('emojiId','Required parameter requestParameters.emojiId was null or undefined when calling updateGuildEmoji.');
        }

        if (requestParameters.updateGuildEmojiRequest === null || requestParameters.updateGuildEmojiRequest === undefined) {
            throw new runtime.RequiredError('updateGuildEmojiRequest','Required parameter requestParameters.updateGuildEmojiRequest was null or undefined when calling updateGuildEmoji.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/emojis/{emoji_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"emoji_id"}}`, encodeURIComponent(String(requestParameters.emojiId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGuildEmojiRequestToJSON(requestParameters.updateGuildEmojiRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmojiResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateGuildEmoji(requestParameters: UpdateGuildEmojiOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmojiResponse> {
        const response = await this.updateGuildEmojiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGuildMemberRaw(requestParameters: UpdateGuildMemberOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildMemberResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateGuildMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateGuildMember.');
        }

        if (requestParameters.updateGuildMemberRequest === null || requestParameters.updateGuildMemberRequest === undefined) {
            throw new runtime.RequiredError('updateGuildMemberRequest','Required parameter requestParameters.updateGuildMemberRequest was null or undefined when calling updateGuildMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/members/{user_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGuildMemberRequestToJSON(requestParameters.updateGuildMemberRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildMemberResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateGuildMember(requestParameters: UpdateGuildMemberOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildMemberResponse> {
        const response = await this.updateGuildMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGuildRoleRaw(requestParameters: UpdateGuildRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildRoleResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateGuildRole.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling updateGuildRole.');
        }

        if (requestParameters.updateGuildRoleRequest === null || requestParameters.updateGuildRoleRequest === undefined) {
            throw new runtime.RequiredError('updateGuildRoleRequest','Required parameter requestParameters.updateGuildRoleRequest was null or undefined when calling updateGuildRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/roles/{role_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGuildRoleRequestToJSON(requestParameters.updateGuildRoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateGuildRole(requestParameters: UpdateGuildRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildRoleResponse> {
        const response = await this.updateGuildRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGuildScheduledEventRaw(requestParameters: UpdateGuildScheduledEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateGuildScheduledEvent.');
        }

        if (requestParameters.guildScheduledEventId === null || requestParameters.guildScheduledEventId === undefined) {
            throw new runtime.RequiredError('guildScheduledEventId','Required parameter requestParameters.guildScheduledEventId was null or undefined when calling updateGuildScheduledEvent.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateGuildScheduledEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"guild_scheduled_event_id"}}`, encodeURIComponent(String(requestParameters.guildScheduledEventId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async updateGuildScheduledEvent(requestParameters: UpdateGuildScheduledEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateGuildScheduledEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGuildStickerRaw(requestParameters: UpdateGuildStickerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildStickerResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateGuildSticker.');
        }

        if (requestParameters.stickerId === null || requestParameters.stickerId === undefined) {
            throw new runtime.RequiredError('stickerId','Required parameter requestParameters.stickerId was null or undefined when calling updateGuildSticker.');
        }

        if (requestParameters.updateGuildStickerRequest === null || requestParameters.updateGuildStickerRequest === undefined) {
            throw new runtime.RequiredError('updateGuildStickerRequest','Required parameter requestParameters.updateGuildStickerRequest was null or undefined when calling updateGuildSticker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/stickers/{sticker_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"sticker_id"}}`, encodeURIComponent(String(requestParameters.stickerId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGuildStickerRequestToJSON(requestParameters.updateGuildStickerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildStickerResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateGuildSticker(requestParameters: UpdateGuildStickerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildStickerResponse> {
        const response = await this.updateGuildStickerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGuildTemplateRaw(requestParameters: UpdateGuildTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildTemplateResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateGuildTemplate.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling updateGuildTemplate.');
        }

        if (requestParameters.updateGuildTemplateRequest === null || requestParameters.updateGuildTemplateRequest === undefined) {
            throw new runtime.RequiredError('updateGuildTemplateRequest','Required parameter requestParameters.updateGuildTemplateRequest was null or undefined when calling updateGuildTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/templates/{code}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGuildTemplateRequestToJSON(requestParameters.updateGuildTemplateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildTemplateResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateGuildTemplate(requestParameters: UpdateGuildTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildTemplateResponse> {
        const response = await this.updateGuildTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGuildWelcomeScreenRaw(requestParameters: UpdateGuildWelcomeScreenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuildWelcomeScreenResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateGuildWelcomeScreen.');
        }

        if (requestParameters.welcomeScreenPatchRequestPartial === null || requestParameters.welcomeScreenPatchRequestPartial === undefined) {
            throw new runtime.RequiredError('welcomeScreenPatchRequestPartial','Required parameter requestParameters.welcomeScreenPatchRequestPartial was null or undefined when calling updateGuildWelcomeScreen.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/welcome-screen`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WelcomeScreenPatchRequestPartialToJSON(requestParameters.welcomeScreenPatchRequestPartial),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuildWelcomeScreenResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateGuildWelcomeScreen(requestParameters: UpdateGuildWelcomeScreenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuildWelcomeScreenResponse> {
        const response = await this.updateGuildWelcomeScreenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGuildWidgetSettingsRaw(requestParameters: UpdateGuildWidgetSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WidgetSettingsResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateGuildWidgetSettings.');
        }

        if (requestParameters.updateGuildWidgetSettingsRequest === null || requestParameters.updateGuildWidgetSettingsRequest === undefined) {
            throw new runtime.RequiredError('updateGuildWidgetSettingsRequest','Required parameter requestParameters.updateGuildWidgetSettingsRequest was null or undefined when calling updateGuildWidgetSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/widget`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGuildWidgetSettingsRequestToJSON(requestParameters.updateGuildWidgetSettingsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WidgetSettingsResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateGuildWidgetSettings(requestParameters: UpdateGuildWidgetSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WidgetSettingsResponse> {
        const response = await this.updateGuildWidgetSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateMessageRaw(requestParameters: UpdateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling updateMessage.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling updateMessage.');
        }

        if (requestParameters.messageEditRequestPartial === null || requestParameters.messageEditRequestPartial === undefined) {
            throw new runtime.RequiredError('messageEditRequestPartial','Required parameter requestParameters.messageEditRequestPartial was null or undefined when calling updateMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/channels/{channel_id}/messages/{message_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MessageEditRequestPartialToJSON(requestParameters.messageEditRequestPartial),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateMessage(requestParameters: UpdateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.updateMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateMyApplicationRaw(requestParameters: UpdateMyApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateApplicationResponse>> {
        if (requestParameters.applicationFormPartial === null || requestParameters.applicationFormPartial === undefined) {
            throw new runtime.RequiredError('applicationFormPartial','Required parameter requestParameters.applicationFormPartial was null or undefined when calling updateMyApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/applications/@me`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationFormPartialToJSON(requestParameters.applicationFormPartial),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateApplicationResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateMyApplication(requestParameters: UpdateMyApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateApplicationResponse> {
        const response = await this.updateMyApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateMyGuildMemberRaw(requestParameters: UpdateMyGuildMemberOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateGuildMemberResponse>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateMyGuildMember.');
        }

        if (requestParameters.updateMyGuildMemberRequest === null || requestParameters.updateMyGuildMemberRequest === undefined) {
            throw new runtime.RequiredError('updateMyGuildMemberRequest','Required parameter requestParameters.updateMyGuildMemberRequest was null or undefined when calling updateMyGuildMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/members/@me`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMyGuildMemberRequestToJSON(requestParameters.updateMyGuildMemberRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateGuildMemberResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateMyGuildMember(requestParameters: UpdateMyGuildMemberOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateGuildMemberResponse> {
        const response = await this.updateMyGuildMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateMyUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/users/@me`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateMyUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateMyUserRaw(initOverrides);
    }

    /**
     */
    async updateOriginalWebhookMessageRaw(requestParameters: UpdateOriginalWebhookMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling updateOriginalWebhookMessage.');
        }

        if (requestParameters.webhookToken === null || requestParameters.webhookToken === undefined) {
            throw new runtime.RequiredError('webhookToken','Required parameter requestParameters.webhookToken was null or undefined when calling updateOriginalWebhookMessage.');
        }

        if (requestParameters.incomingWebhookUpdateRequestPartial === null || requestParameters.incomingWebhookUpdateRequestPartial === undefined) {
            throw new runtime.RequiredError('incomingWebhookUpdateRequestPartial','Required parameter requestParameters.incomingWebhookUpdateRequestPartial was null or undefined when calling updateOriginalWebhookMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.threadId !== undefined) {
            queryParameters['thread_id'] = requestParameters.threadId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}/{webhook_token}/messages/@original`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"webhook_token"}}`, encodeURIComponent(String(requestParameters.webhookToken))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IncomingWebhookUpdateRequestPartialToJSON(requestParameters.incomingWebhookUpdateRequestPartial),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateOriginalWebhookMessage(requestParameters: UpdateOriginalWebhookMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.updateOriginalWebhookMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSelfVoiceStateRaw(requestParameters: UpdateSelfVoiceStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateSelfVoiceState.');
        }

        if (requestParameters.updateSelfVoiceStateRequest === null || requestParameters.updateSelfVoiceStateRequest === undefined) {
            throw new runtime.RequiredError('updateSelfVoiceStateRequest','Required parameter requestParameters.updateSelfVoiceStateRequest was null or undefined when calling updateSelfVoiceState.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/voice-states/@me`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSelfVoiceStateRequestToJSON(requestParameters.updateSelfVoiceStateRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateSelfVoiceState(requestParameters: UpdateSelfVoiceStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateSelfVoiceStateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateStageInstanceRaw(requestParameters: UpdateStageInstanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageInstanceResponse>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling updateStageInstance.');
        }

        if (requestParameters.updateStageInstanceRequest === null || requestParameters.updateStageInstanceRequest === undefined) {
            throw new runtime.RequiredError('updateStageInstanceRequest','Required parameter requestParameters.updateStageInstanceRequest was null or undefined when calling updateStageInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/stage-instances/{channel_id}`.replace(`{${"channel_id"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStageInstanceRequestToJSON(requestParameters.updateStageInstanceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageInstanceResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateStageInstance(requestParameters: UpdateStageInstanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageInstanceResponse> {
        const response = await this.updateStageInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateVoiceStateRaw(requestParameters: UpdateVoiceStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guildId === null || requestParameters.guildId === undefined) {
            throw new runtime.RequiredError('guildId','Required parameter requestParameters.guildId was null or undefined when calling updateVoiceState.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateVoiceState.');
        }

        if (requestParameters.updateVoiceStateRequest === null || requestParameters.updateVoiceStateRequest === undefined) {
            throw new runtime.RequiredError('updateVoiceStateRequest','Required parameter requestParameters.updateVoiceStateRequest was null or undefined when calling updateVoiceState.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/guilds/{guild_id}/voice-states/{user_id}`.replace(`{${"guild_id"}}`, encodeURIComponent(String(requestParameters.guildId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVoiceStateRequestToJSON(requestParameters.updateVoiceStateRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateVoiceState(requestParameters: UpdateVoiceStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateVoiceStateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateWebhookRaw(requestParameters: UpdateWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling updateWebhook.');
        }

        if (requestParameters.updateWebhookRequest === null || requestParameters.updateWebhookRequest === undefined) {
            throw new runtime.RequiredError('updateWebhookRequest','Required parameter requestParameters.updateWebhookRequest was null or undefined when calling updateWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWebhookRequestToJSON(requestParameters.updateWebhookRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async updateWebhook(requestParameters: UpdateWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateWebhookByTokenRaw(requestParameters: UpdateWebhookByTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling updateWebhookByToken.');
        }

        if (requestParameters.webhookToken === null || requestParameters.webhookToken === undefined) {
            throw new runtime.RequiredError('webhookToken','Required parameter requestParameters.webhookToken was null or undefined when calling updateWebhookByToken.');
        }

        if (requestParameters.updateWebhookByTokenRequest === null || requestParameters.updateWebhookByTokenRequest === undefined) {
            throw new runtime.RequiredError('updateWebhookByTokenRequest','Required parameter requestParameters.updateWebhookByTokenRequest was null or undefined when calling updateWebhookByToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}/{webhook_token}`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"webhook_token"}}`, encodeURIComponent(String(requestParameters.webhookToken))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWebhookByTokenRequestToJSON(requestParameters.updateWebhookByTokenRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async updateWebhookByToken(requestParameters: UpdateWebhookByTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateWebhookByTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateWebhookMessageRaw(requestParameters: UpdateWebhookMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling updateWebhookMessage.');
        }

        if (requestParameters.webhookToken === null || requestParameters.webhookToken === undefined) {
            throw new runtime.RequiredError('webhookToken','Required parameter requestParameters.webhookToken was null or undefined when calling updateWebhookMessage.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling updateWebhookMessage.');
        }

        if (requestParameters.incomingWebhookUpdateRequestPartial === null || requestParameters.incomingWebhookUpdateRequestPartial === undefined) {
            throw new runtime.RequiredError('incomingWebhookUpdateRequestPartial','Required parameter requestParameters.incomingWebhookUpdateRequestPartial was null or undefined when calling updateWebhookMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.threadId !== undefined) {
            queryParameters['thread_id'] = requestParameters.threadId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BotToken authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"webhook_token"}}`, encodeURIComponent(String(requestParameters.webhookToken))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IncomingWebhookUpdateRequestPartialToJSON(requestParameters.incomingWebhookUpdateRequestPartial),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateWebhookMessage(requestParameters: UpdateWebhookMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.updateWebhookMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
