import { From1 } from "../../types/parseable";
import { Id, nullableSnowflakeToId } from "../id";
import { APIMessage, GatewayMessageEventExtraFields} from 'discord-api-types/v10'
import * as U from "../user";
import * as O from 'fp-ts/Option'
import * as C from '../channel'
import * as fp from 'fp-ts/function'

export interface CoreMessage {
    content: string;
    channelId: Id;
    author: U.User //	the author of this message (not guaranteed to be a valid user, see below)
    timestamp: string; //ISO8601 timestamp	when this message was sent
    editedTimestamp: O.Option<string>;//ISO8601 timestamp	when this message was edited (or null if never)
    tts: boolean;//   whether this was a TTS message
    mentionEveryone: boolean;//	whether this message mentions everyone
    mentions: U.User[]	//array of user objects	users specifically mentioned in the message
    //mention_roles	array of role object ids	roles specifically mentioned in this message
    //mention_channels?***	array of channel mention objects	channels specifically mentioned in this message
    //attachments**	array of attachment objects	any attached files
    //embeds**	array of embed objects	any embedded content
    //reactions?	array of reaction objects	reactions to the message
    nonce: O.Option<number | string>;//	integer or string	used for validating a message was sent
    pinned:	boolean; //whether this message is pinned
    webhookId: O.Option<Id>;//	if the message is generated by a webhook, this is the webhook's id
    type: MessageType;// type of message
    //activity?	message activity object	sent with Rich Presence-related chat embeds
    //application?	partial application object	sent with Rich Presence-related chat embeds
    applicationId: O.Option<Id>//if the message is an Interaction or application-owned webhook, this is the id of the application
    //message_reference?	message reference object	data showing the source of a crosspost, channel follow add, pin, or reply message
    flags: O.Option<number>; //message flags combined as a bitfield
    //referenced_message?****	?message object	the message associated with the message_reference
    //interaction?	message interaction object	sent if the message is a response to an Interaction
    thread: O.Option<C.CoreChannel> 	//the thread that was started from this message, includes thread member object
    //components?**	array of message components	sent if the message contains components like buttons, action rows, or other interactive components
    //sticker_items?	array of message sticker item objects	sent if the message contains stickers
    //stickers?	array of sticker objects	Deprecated the stickers sent with the message
    position: O.Option<number>; //A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with total_message_sent on parent thread
    //role_subscription_data?	role subscription data object	data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message
}

interface GuildMessage extends  CoreMessage {
    webhookId: O.None;
    guildId: O.Some<Id>;
}

interface WebhookMessage extends CoreMessage {
    webhookId: O.Some<Id>;
    guildId: O.Some<Id>,
}

interface DmMessage extends CoreMessage { 
    webhookId: O.None
    guildId: O.None
}

export type Message = 
    | GuildMessage
    | WebhookMessage
    | DmMessage
/**
 * https://discord.com/developers/docs/resources/channel#message-object-message-types
 */
export enum MessageType {
	Default,
	RecipientAdd,
	RecipientRemove,
	Call,
	ChannelNameChange,
	ChannelIconChange,
	ChannelPinnedMessage,
	UserJoin,
	GuildBoost,
	GuildBoostTier1,
	GuildBoostTier2,
	GuildBoostTier3,
	ChannelFollowAdd,

	GuildDiscoveryDisqualified = 14,
	GuildDiscoveryRequalified,
	GuildDiscoveryGracePeriodInitialWarning,
	GuildDiscoveryGracePeriodFinalWarning,
	ThreadCreated,
	Reply,
	ChatInputCommand,
	ThreadStarterMessage,
	GuildInviteReminder,
	ContextMenuCommand,
	AutoModerationAction,
	RoleSubscriptionPurchase,
	InteractionPremiumUpsell,
	StageStart,
	StageEnd,
	StageSpeaker,
	/**
	 * @unstable https://github.com/discord/discord-api-docs/pull/5927#discussion_r1107678548
	 */
	StageRaiseHand,
	StageTopic,
	GuildApplicationPremiumSubscription,
}


function from(raw: APIMessage) : CoreMessage {
    
    return {
        content: raw.content,
        channelId: new Id(raw.channel_id),
        webhookId: nullableSnowflakeToId(raw.webhook_id),
        author: U.Parseable.from(raw.author),
        timestamp: raw.timestamp,
        editedTimestamp: O.fromNullable(raw.edited_timestamp),
        tts: raw.tts,
        mentionEveryone: raw.mention_everyone,
        mentions: raw.mentions.map(U.Parseable.from),
        nonce: O.fromNullable(raw.nonce),
        pinned: raw.pinned,
        type: raw.type,
        applicationId: nullableSnowflakeToId(raw.application_id),
        flags: O.fromNullable(raw.flags),
        position: O.fromNullable(raw.position),
        thread: fp.pipe(O.fromNullable(raw.thread), O.map(C.Parseable.from))
    }
}


//export function isDmMessage(ms: CoreMessage): ms is DmMessage {
//    return O.isNone(ms.guildId);
//}
//
//export function isWebhookMessage(ms: CoreMessage): ms is WebhookMessage {
//    return O.isSome(ms.webhookId);
//}
//
//export function isGuildMessage(ms: CoreMessage) : ms is GuildMessage {
//    return O.isSome(ms.guildId) && !isWebhookMessage(ms);
//}
export const Parseable: From1<APIMessage & GatewayMessageEventExtraFields, CoreMessage> =  {
    from
}
